{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\ude80 Python ROS Engine \u00b6 A pure Python implementation of ROS2 core functionality with bridging capabilities to interact with native ROS nodes. \u2728 Features \u00b6 \ud83d\udd04 Node creation and lifecycle management \ud83d\udce2 Publisher and subscriber patterns with Quality of Service (QoS) profiles \ud83e\udd1d Service and client communication \u2699\ufe0f Parameter handling with callbacks \ud83d\udd0d Topic and service discovery \u23f1\ufe0f Timer functionality \ud83c\udf09 ROS1 bridging capabilities for node/topic/service discovery \ud83d\udce8 Message translation between Python ROS engine and native ROS \ud83d\udee0\ufe0f Configuration with Hydra best practices \ud83d\udea6 Launch system for managing multiple nodes \ud83d\udcca System status reporting for nodes, topics, and services \ud83d\udcc1 Project Structure \u00b6 graph TD A[Python ROS Engine] --> B[Core Functionality] A --> C[Bridging Capabilities] A --> D[Launch System] B --> B1[Node Management] B --> B2[Publishers/Subscribers] B --> B3[Services/Clients] B --> B4[Parameters] B --> B5[Timers] C --> C1[ROS1 Bridge] C --> C2[Message Translation] D --> D1[Launch Description] D --> D2[System Status] \ud83d\udce8 Message Types \u00b6 The Python ROS Engine supports a wide range of message types: Primitive Types \u00b6 Bool : Boolean values String : String values Int8 , Int16 , Int32 , Int64 : Signed integer values UInt8 , UInt16 , UInt32 , UInt64 : Unsigned integer values Float32 , Float64 : Floating point values Empty : Empty messages Time : Time values Duration : Duration values Multi-dimensional Array Types \u00b6 ByteMultiArray : Multi-array of bytes Int8MultiArray , Int16MultiArray , Int32MultiArray , Int64MultiArray : Multi-arrays of integer values UInt8MultiArray , UInt16MultiArray , UInt32MultiArray , UInt64MultiArray : Multi-arrays of unsigned integer values Float32MultiArray , Float64MultiArray : Multi-arrays of floating point values \ud83d\ude80 Getting Started \u00b6 To get started with the Python ROS Engine, check out our Installation Guide and Usage Guide . \ud83d\udcda Documentation \u00b6 API Documentation - Detailed information about all classes and methods Bridging with Native ROS - Information about interacting with native ROS systems Launch System - Information about the launch system for managing multiple nodes Usage Guide - Comprehensive guide on how to use the engine \ud83e\uddea Examples \u00b6 See our Examples page for complete working examples demonstrating various features of the Python ROS Engine. We've also included a Complete Example Project that shows how to build a robot system with multiple interconnected nodes using best practices. \ud83e\udd1d Contributing \u00b6 We welcome contributions! Please see our Contributing Guide for details on how to contribute to this project. \ud83d\udcc4 License \u00b6 This project is licensed under the Apache License 2.0 - see the License file for details.","title":"Home"},{"location":"#python-ros-engine","text":"A pure Python implementation of ROS2 core functionality with bridging capabilities to interact with native ROS nodes.","title":"\ud83d\ude80 Python ROS Engine"},{"location":"#features","text":"\ud83d\udd04 Node creation and lifecycle management \ud83d\udce2 Publisher and subscriber patterns with Quality of Service (QoS) profiles \ud83e\udd1d Service and client communication \u2699\ufe0f Parameter handling with callbacks \ud83d\udd0d Topic and service discovery \u23f1\ufe0f Timer functionality \ud83c\udf09 ROS1 bridging capabilities for node/topic/service discovery \ud83d\udce8 Message translation between Python ROS engine and native ROS \ud83d\udee0\ufe0f Configuration with Hydra best practices \ud83d\udea6 Launch system for managing multiple nodes \ud83d\udcca System status reporting for nodes, topics, and services","title":"\u2728 Features"},{"location":"#project-structure","text":"graph TD A[Python ROS Engine] --> B[Core Functionality] A --> C[Bridging Capabilities] A --> D[Launch System] B --> B1[Node Management] B --> B2[Publishers/Subscribers] B --> B3[Services/Clients] B --> B4[Parameters] B --> B5[Timers] C --> C1[ROS1 Bridge] C --> C2[Message Translation] D --> D1[Launch Description] D --> D2[System Status]","title":"\ud83d\udcc1 Project Structure"},{"location":"#message-types","text":"The Python ROS Engine supports a wide range of message types:","title":"\ud83d\udce8 Message Types"},{"location":"#primitive-types","text":"Bool : Boolean values String : String values Int8 , Int16 , Int32 , Int64 : Signed integer values UInt8 , UInt16 , UInt32 , UInt64 : Unsigned integer values Float32 , Float64 : Floating point values Empty : Empty messages Time : Time values Duration : Duration values","title":"Primitive Types"},{"location":"#multi-dimensional-array-types","text":"ByteMultiArray : Multi-array of bytes Int8MultiArray , Int16MultiArray , Int32MultiArray , Int64MultiArray : Multi-arrays of integer values UInt8MultiArray , UInt16MultiArray , UInt32MultiArray , UInt64MultiArray : Multi-arrays of unsigned integer values Float32MultiArray , Float64MultiArray : Multi-arrays of floating point values","title":"Multi-dimensional Array Types"},{"location":"#getting-started","text":"To get started with the Python ROS Engine, check out our Installation Guide and Usage Guide .","title":"\ud83d\ude80 Getting Started"},{"location":"#documentation","text":"API Documentation - Detailed information about all classes and methods Bridging with Native ROS - Information about interacting with native ROS systems Launch System - Information about the launch system for managing multiple nodes Usage Guide - Comprehensive guide on how to use the engine","title":"\ud83d\udcda Documentation"},{"location":"#examples","text":"See our Examples page for complete working examples demonstrating various features of the Python ROS Engine. We've also included a Complete Example Project that shows how to build a robot system with multiple interconnected nodes using best practices.","title":"\ud83e\uddea Examples"},{"location":"#contributing","text":"We welcome contributions! Please see our Contributing Guide for details on how to contribute to this project.","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"This project is licensed under the Apache License 2.0 - see the License file for details.","title":"\ud83d\udcc4 License"},{"location":"api/","text":"\ud83d\udcda API Documentation \u00b6 \ud83d\udd04 Message Flow \u00b6 The Python ROS Engine follows a message flow pattern similar to ROS2: graph LR A[Node] -- create_publisher --> B[Publisher] A -- create_subscription --> C[Subscriber] A -- create_service --> D[Service] A -- create_client --> E[Client] B -- publish --> F[(Topic)] F -- subscribe --> C E -- call --> G[(Service)] G -- handle --> D Here's a sequence diagram showing the complete message flow from publisher to subscriber: sequenceDiagram participant Node1 participant Publisher participant Topic participant Subscriber participant Node2 Node1->>Publisher: create_publisher() Node2->>Subscriber: create_subscription() Publisher->>Topic: publish(message) Topic->>Subscriber: deliver(message) Subscriber->>Node2: callback(message) And here's a sequence diagram for the service/client request-response flow: sequenceDiagram participant ClientNode participant Client participant Service participant ServiceNode ClientNode->>Client: create_client() ServiceNode->>Service: create_service() Client->>Service: call(request) Service->>ServiceNode: callback(request) ServiceNode->>Service: return(response) Service->>Client: return(response) Client->>ClientNode: return(response) \ud83c\udf00 Node Class \u00b6 The Node class is the base class for all ROS nodes. Constructor \u00b6 Node ( node_name : str , namespace : str = \"/\" ) node_name : Name of the node namespace : Namespace for the node (default: \"/\") Methods \u00b6 create_publisher \u00b6 create_publisher ( msg_type : type , topic_name : str , qos_profile : QoSProfile = None ) Create a publisher for a topic. msg_type : The message type class for this publisher topic_name : The name of the topic to publish to qos_profile : Quality of Service profile (optional) create_subscription \u00b6 create_subscription ( msg_type : type , topic_name : str , callback : Callable , qos_profile : QoSProfile = None ) Create a subscription to a topic. msg_type : The message type class for this subscription topic_name : The name of the topic to subscribe to callback : Function to call when a message is received qos_profile : Quality of Service profile (optional) create_service \u00b6 create_service ( srv_type : type , service_name : str , callback : Callable , qos_profile : QoSProfile = None ) Create a service server. srv_type : The service type class service_name : The name of the service callback : Function to call when a service request is received qos_profile : Quality of Service profile (optional) create_client \u00b6 create_client ( srv_type : type , service_name : str , qos_profile : QoSProfile = None ) Create a service client. srv_type : The service type class service_name : The name of the service to call qos_profile : Quality of Service profile (optional) create_timer \u00b6 create_timer ( timer_period_sec : float , callback : Callable ) Create a timer that calls the callback function periodically. timer_period_sec : Timer period in seconds callback : Function to call when timer expires declare_parameter \u00b6 declare_parameter ( name : str , default_value : Any = None , parameter_type : str = None ) Declare a parameter with a name and default value. name : Parameter name default_value : Default value for the parameter (optional) parameter_type : Type of the parameter (optional) get_parameter \u00b6 get_parameter ( name : str ) -> Parameter Get a parameter by name. name : Parameter name Returns: Parameter object set_parameter \u00b6 set_parameter ( name : str , value : Any ) -> bool Set a parameter value. name : Parameter name value : New value for the parameter Returns: True if successful, False otherwise add_on_set_parameters_callback \u00b6 add_on_set_parameters_callback ( callback : Callable ) Add a callback to be called when parameters are set. callback : Function to call when parameters are set get_topic_names_and_types \u00b6 get_topic_names_and_types () -> List [ tuple ] Get list of topics and their types. Returns: List of (topic_name, topic_types) tuples get_service_names_and_types \u00b6 get_service_names_and_types () -> List [ tuple ] Get list of services and their types. Returns: List of (service_name, service_types) tuples get_publishers_info_by_topic \u00b6 get_publishers_info_by_topic ( topic_name : str ) -> List [ Dict [ str , Any ]] Get information about publishers for a topic. topic_name : Name of the topic Returns: List of dictionaries with publisher information get_subscriptions_info_by_topic \u00b6 get_subscriptions_info_by_topic ( topic_name : str ) -> List [ Dict [ str , Any ]] Get information about subscriptions for a topic. topic_name : Name of the topic Returns: List of dictionaries with subscription information spin \u00b6 spin () Spin the node to process callbacks. This function blocks until the node is destroyed. spin_once \u00b6 spin_once ( timeout_sec : float = 0.1 ) Process one callback and return. timeout_sec : Time to wait for a callback (default: 0.1) destroy_node \u00b6 destroy_node () Destroy the node and clean up resources. \ud83d\udce8 Message Classes \u00b6 Message \u00b6 Base class for all ROS messages. serialize \u00b6 serialize () -> bytes Serialize the message to bytes. Returns: Serialized message as bytes deserialize \u00b6 deserialize ( data : bytes ) Deserialize bytes to a message instance. data : Serialized message data as bytes String \u00b6 String message type. Fields \u00b6 data : str - String data Int8 \u00b6 8-bit signed integer message type. Fields \u00b6 data : int - Integer data (range: -128 to 127) Int16 \u00b6 16-bit signed integer message type. Fields \u00b6 data : int - Integer data (range: -32,768 to 32,767) Int32 \u00b6 32-bit signed integer message type. Fields \u00b6 data : int - Integer data (range: -2,147,483,648 to 2,147,483,647) Int64 \u00b6 64-bit signed integer message type. Fields \u00b6 data : int - Integer data (range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) UInt8 \u00b6 8-bit unsigned integer message type. Fields \u00b6 data : int - Integer data (range: 0 to 255) UInt16 \u00b6 16-bit unsigned integer message type. Fields \u00b6 data : int - Integer data (range: 0 to 65,535) UInt32 \u00b6 32-bit unsigned integer message type. Fields \u00b6 data : int - Integer data (range: 0 to 4,294,967,295) UInt64 \u00b6 64-bit unsigned integer message type. Fields \u00b6 data : int - Integer data (range: 0 to 18,446,744,073,709,551,615) Float32 \u00b6 32-bit floating point message type. Fields \u00b6 data : float - Floating point data Float64 \u00b6 64-bit floating point message type. Fields \u00b6 data : float - Floating point data Bool \u00b6 Boolean message type. Fields \u00b6 data : bool - Boolean data (True or False) Empty \u00b6 Empty message type. Fields \u00b6 None Time \u00b6 Time message type. Fields \u00b6 secs : int - Seconds nsecs : int - Nanoseconds Duration \u00b6 Duration message type. Fields \u00b6 secs : int - Seconds nsecs : int - Nanoseconds MultiArrayDimension \u00b6 Dimension description for multi-dimensional arrays. Fields \u00b6 label : str - Label for the dimension size : int - Size of the dimension stride : int - Stride of the dimension MultiArrayLayout \u00b6 Layout description for multi-dimensional arrays. Fields \u00b6 dim : List[MultiArrayDimension] - Array of dimension properties data_offset : int - Offset to first data point in the array ByteMultiArray \u00b6 Multi-array of bytes. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of bytes Int8MultiArray \u00b6 Multi-array of Int8 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of Int8 values Int16MultiArray \u00b6 Multi-array of Int16 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of Int16 values Int32MultiArray \u00b6 Multi-array of Int32 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of Int32 values Int64MultiArray \u00b6 Multi-array of Int64 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of Int64 values UInt8MultiArray \u00b6 Multi-array of UInt8 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt8 values UInt16MultiArray \u00b6 Multi-array of UInt16 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt16 values UInt32MultiArray \u00b6 Multi-array of UInt32 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt32 values UInt64MultiArray \u00b6 Multi-array of UInt64 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt64 values Float32MultiArray \u00b6 Multi-array of Float32 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[float] - Array of Float32 values Float64MultiArray \u00b6 Multi-array of Float64 values. Fields \u00b6 layout : MultiArrayLayout - Message layout data : List[float] - Array of Float64 values \ud83d\udccb QoS Classes \u00b6 ReliabilityPolicy \u00b6 Reliability policy for message delivery. RELIABLE : Guaranteed delivery BEST_EFFORT : No guarantee of delivery DurabilityPolicy \u00b6 Durability policy for message persistence. TRANSIENT_LOCAL : Replays last message for late subscribers VOLATILE : No message replay QoSProfile \u00b6 Quality of Service profile defining communication policies. Constructor \u00b6 QoSProfile ( reliability : ReliabilityPolicy = ReliabilityPolicy . RELIABLE , durability : DurabilityPolicy = DurabilityPolicy . VOLATILE , depth : int = 10 ) Fields \u00b6 reliability : ReliabilityPolicy - Message delivery reliability durability : DurabilityPolicy - Message persistence policy depth : int - Queue depth for messages \ud83d\udce2 Publisher Class \u00b6 Constructor \u00b6 Publisher ( node : Node , msg_type : type , topic_name : str , qos_profile : QoSProfile ) node : Node - Parent node msg_type : type - Message type for this publisher topic_name : str - Topic name to publish to qos_profile : QoSProfile - Quality of Service profile Methods \u00b6 publish \u00b6 publish ( message : Message ) Publish a message to the topic. message : Message - Message to publish \ud83d\udce1 Subscriber Class \u00b6 Constructor \u00b6 Subscriber ( node : Node , msg_type : type , topic_name : str , callback : Callable , qos_profile : QoSProfile ) node : Node - Parent node msg_type : type - Message type for this subscription topic_name : str - Topic name to subscribe to callback : Callable - Callback function for received messages qos_profile : QoSProfile - Quality of Service profile \ud83e\udd1d Service Class \u00b6 Constructor \u00b6 Service ( node : Node , srv_type : type , service_name : str , callback : Callable , qos_profile : QoSProfile ) node : Node - Parent node srv_type : type - Service type service_name : str - Service name callback : Callable - Callback function for service requests qos_profile : QoSProfile - Quality of Service profile \ud83d\udcde Client Class \u00b6 Constructor \u00b6 Client ( node : Node , srv_type : type , service_name : str , qos_profile : QoSProfile ) node : Node - Parent node srv_type : type - Service type service_name : str - Service name to call qos_profile : QoSProfile - Quality of Service profile Methods \u00b6 call \u00b6 call ( request ) Call a service synchronously. request : Service request object Returns: Service response object call_async \u00b6 call_async ( request ) Call a service asynchronously. request : Service request object Returns: Future object for the service response \ud83d\udd0d Discovery Class \u00b6 Methods \u00b6 get_all_topics \u00b6 get_all_topics () -> List [ str ] Get all available topics. Returns: List of topic names get_all_services \u00b6 get_all_services () -> List [ str ] Get all available services. Returns: List of service names get_topic_types \u00b6 get_topic_types ( topic_name : str ) -> List [ str ] Get the types of a topic. topic_name : Name of the topic Returns: List of topic types get_service_types \u00b6 get_service_types ( service_name : str ) -> List [ str ] Get the types of a service. service_name : Name of the service Returns: List of service types get_nodes \u00b6 get_nodes () -> List [ str ] Get all available nodes. Returns: List of node names \ud83c\udf09 Bridge Class \u00b6 The bridge class provides functionality to interact with native ROS systems. Constructor \u00b6 Bridge ( host : str = \"localhost\" , port : int = 11311 ) host : str - ROS master host (default: \"localhost\") port : int - ROS master port (default: 11311) Methods \u00b6 connect \u00b6 connect () Connect to the ROS master. Raises BridgeConnectionError if connection fails. discover_ros_nodes \u00b6 discover_ros_nodes () -> List [ str ] Discover all native ROS nodes. Returns: List of node names discover_ros_topics \u00b6 discover_ros_topics () -> List [ Dict [ str , Any ]] Discover all native ROS topics. Returns: List of dictionaries with topic information discover_ros_services \u00b6 discover_ros_services () -> List [ Dict [ str , Any ]] Discover all native ROS services. Returns: List of dictionaries with service information \ud83d\udd04 MessageTranslator Class \u00b6 Handles translation between Python ROS engine messages and native ROS messages. Methods \u00b6 pyros_to_ros \u00b6 pyros_to_ros ( message : Message , ros_message_type : str ) -> Dict [ str , Any ] Translate a Python ROS engine message to a native ROS message format. message : Python ROS engine message ros_message_type : Native ROS message type (e.g., \"std_msgs/String\") Returns: Dict - Native ROS message in dictionary format ros_to_pyros \u00b6 ros_to_pyros ( ros_message : Dict [ str , Any ], pyros_message_type : Type [ Message ]) -> Message Translate a native ROS message to a Python ROS engine message. ros_message : Native ROS message in dictionary format pyros_message_type : Python ROS engine message type Returns: Message - Python ROS engine message get_pyros_type \u00b6 get_pyros_type ( ros_message_type : str ) -> Type [ Message ] Get the corresponding Python ROS engine message type for a native ROS message type. ros_message_type : Native ROS message type (e.g., \"std_msgs/String\") Returns: Type[Message] - Corresponding Python ROS engine message type get_ros_type \u00b6 get_ros_type ( pyros_message_type : Type [ Message ]) -> str Get the corresponding native ROS message type for a Python ROS engine message type. pyros_message_type : Python ROS engine message type Returns: str - Corresponding native ROS message type \ud83d\ude80 LaunchSystem Class \u00b6 The launch system for managing multiple nodes and providing system status information. Constructor \u00b6 LaunchSystem () Methods \u00b6 add_node \u00b6 add_node ( node_name : str , node_class : type , * args , ** kwargs ) Add a node to the launch system. node_name : Name to register the node under node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization add_node_from_file \u00b6 add_node_from_file ( node_name : str , file_path : str , class_name : str , * args , ** kwargs ) Add a node to the launch system from a Python file. node_name : Name to register the node under file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization remove_node \u00b6 remove_node ( node_name : str ) Remove a node from the launch system. node_name : Name of the node to remove start \u00b6 start () Start all nodes in the launch system. shutdown \u00b6 shutdown () Shutdown all nodes in the launch system. get_system_status \u00b6 get_system_status () -> Dict [ str , Any ] Get the status of the entire system. Returns: Dict containing system status information print_system_status \u00b6 print_system_status () Print the status of the entire system in a human-readable format. \ud83d\udcc4 LaunchDescription Class \u00b6 Description of a launch system configuration. Constructor \u00b6 LaunchDescription ( launch_system : LaunchSystem = None ) Initialize a launch description. launch_system : Optional LaunchSystem to use Methods \u00b6 add_node \u00b6 add_node ( node_class : type , * args , ** kwargs ) Add a node action to the launch description. node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization add_node_from_file \u00b6 add_node_from_file ( file_path : str , class_name : str , * args , ** kwargs ) Add a node action from a Python file to the launch description. file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization execute \u00b6 execute () Execute all actions in the launch description.","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"\ud83d\udcda API Documentation"},{"location":"api/#message-flow","text":"The Python ROS Engine follows a message flow pattern similar to ROS2: graph LR A[Node] -- create_publisher --> B[Publisher] A -- create_subscription --> C[Subscriber] A -- create_service --> D[Service] A -- create_client --> E[Client] B -- publish --> F[(Topic)] F -- subscribe --> C E -- call --> G[(Service)] G -- handle --> D Here's a sequence diagram showing the complete message flow from publisher to subscriber: sequenceDiagram participant Node1 participant Publisher participant Topic participant Subscriber participant Node2 Node1->>Publisher: create_publisher() Node2->>Subscriber: create_subscription() Publisher->>Topic: publish(message) Topic->>Subscriber: deliver(message) Subscriber->>Node2: callback(message) And here's a sequence diagram for the service/client request-response flow: sequenceDiagram participant ClientNode participant Client participant Service participant ServiceNode ClientNode->>Client: create_client() ServiceNode->>Service: create_service() Client->>Service: call(request) Service->>ServiceNode: callback(request) ServiceNode->>Service: return(response) Service->>Client: return(response) Client->>ClientNode: return(response)","title":"\ud83d\udd04 Message Flow"},{"location":"api/#node-class","text":"The Node class is the base class for all ROS nodes.","title":"\ud83c\udf00 Node Class"},{"location":"api/#constructor","text":"Node ( node_name : str , namespace : str = \"/\" ) node_name : Name of the node namespace : Namespace for the node (default: \"/\")","title":"Constructor"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#create_publisher","text":"create_publisher ( msg_type : type , topic_name : str , qos_profile : QoSProfile = None ) Create a publisher for a topic. msg_type : The message type class for this publisher topic_name : The name of the topic to publish to qos_profile : Quality of Service profile (optional)","title":"create_publisher"},{"location":"api/#create_subscription","text":"create_subscription ( msg_type : type , topic_name : str , callback : Callable , qos_profile : QoSProfile = None ) Create a subscription to a topic. msg_type : The message type class for this subscription topic_name : The name of the topic to subscribe to callback : Function to call when a message is received qos_profile : Quality of Service profile (optional)","title":"create_subscription"},{"location":"api/#create_service","text":"create_service ( srv_type : type , service_name : str , callback : Callable , qos_profile : QoSProfile = None ) Create a service server. srv_type : The service type class service_name : The name of the service callback : Function to call when a service request is received qos_profile : Quality of Service profile (optional)","title":"create_service"},{"location":"api/#create_client","text":"create_client ( srv_type : type , service_name : str , qos_profile : QoSProfile = None ) Create a service client. srv_type : The service type class service_name : The name of the service to call qos_profile : Quality of Service profile (optional)","title":"create_client"},{"location":"api/#create_timer","text":"create_timer ( timer_period_sec : float , callback : Callable ) Create a timer that calls the callback function periodically. timer_period_sec : Timer period in seconds callback : Function to call when timer expires","title":"create_timer"},{"location":"api/#declare_parameter","text":"declare_parameter ( name : str , default_value : Any = None , parameter_type : str = None ) Declare a parameter with a name and default value. name : Parameter name default_value : Default value for the parameter (optional) parameter_type : Type of the parameter (optional)","title":"declare_parameter"},{"location":"api/#get_parameter","text":"get_parameter ( name : str ) -> Parameter Get a parameter by name. name : Parameter name Returns: Parameter object","title":"get_parameter"},{"location":"api/#set_parameter","text":"set_parameter ( name : str , value : Any ) -> bool Set a parameter value. name : Parameter name value : New value for the parameter Returns: True if successful, False otherwise","title":"set_parameter"},{"location":"api/#add_on_set_parameters_callback","text":"add_on_set_parameters_callback ( callback : Callable ) Add a callback to be called when parameters are set. callback : Function to call when parameters are set","title":"add_on_set_parameters_callback"},{"location":"api/#get_topic_names_and_types","text":"get_topic_names_and_types () -> List [ tuple ] Get list of topics and their types. Returns: List of (topic_name, topic_types) tuples","title":"get_topic_names_and_types"},{"location":"api/#get_service_names_and_types","text":"get_service_names_and_types () -> List [ tuple ] Get list of services and their types. Returns: List of (service_name, service_types) tuples","title":"get_service_names_and_types"},{"location":"api/#get_publishers_info_by_topic","text":"get_publishers_info_by_topic ( topic_name : str ) -> List [ Dict [ str , Any ]] Get information about publishers for a topic. topic_name : Name of the topic Returns: List of dictionaries with publisher information","title":"get_publishers_info_by_topic"},{"location":"api/#get_subscriptions_info_by_topic","text":"get_subscriptions_info_by_topic ( topic_name : str ) -> List [ Dict [ str , Any ]] Get information about subscriptions for a topic. topic_name : Name of the topic Returns: List of dictionaries with subscription information","title":"get_subscriptions_info_by_topic"},{"location":"api/#spin","text":"spin () Spin the node to process callbacks. This function blocks until the node is destroyed.","title":"spin"},{"location":"api/#spin_once","text":"spin_once ( timeout_sec : float = 0.1 ) Process one callback and return. timeout_sec : Time to wait for a callback (default: 0.1)","title":"spin_once"},{"location":"api/#destroy_node","text":"destroy_node () Destroy the node and clean up resources.","title":"destroy_node"},{"location":"api/#message-classes","text":"","title":"\ud83d\udce8 Message Classes"},{"location":"api/#message","text":"Base class for all ROS messages.","title":"Message"},{"location":"api/#serialize","text":"serialize () -> bytes Serialize the message to bytes. Returns: Serialized message as bytes","title":"serialize"},{"location":"api/#deserialize","text":"deserialize ( data : bytes ) Deserialize bytes to a message instance. data : Serialized message data as bytes","title":"deserialize"},{"location":"api/#string","text":"String message type.","title":"String"},{"location":"api/#fields","text":"data : str - String data","title":"Fields"},{"location":"api/#int8","text":"8-bit signed integer message type.","title":"Int8"},{"location":"api/#fields_1","text":"data : int - Integer data (range: -128 to 127)","title":"Fields"},{"location":"api/#int16","text":"16-bit signed integer message type.","title":"Int16"},{"location":"api/#fields_2","text":"data : int - Integer data (range: -32,768 to 32,767)","title":"Fields"},{"location":"api/#int32","text":"32-bit signed integer message type.","title":"Int32"},{"location":"api/#fields_3","text":"data : int - Integer data (range: -2,147,483,648 to 2,147,483,647)","title":"Fields"},{"location":"api/#int64","text":"64-bit signed integer message type.","title":"Int64"},{"location":"api/#fields_4","text":"data : int - Integer data (range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)","title":"Fields"},{"location":"api/#uint8","text":"8-bit unsigned integer message type.","title":"UInt8"},{"location":"api/#fields_5","text":"data : int - Integer data (range: 0 to 255)","title":"Fields"},{"location":"api/#uint16","text":"16-bit unsigned integer message type.","title":"UInt16"},{"location":"api/#fields_6","text":"data : int - Integer data (range: 0 to 65,535)","title":"Fields"},{"location":"api/#uint32","text":"32-bit unsigned integer message type.","title":"UInt32"},{"location":"api/#fields_7","text":"data : int - Integer data (range: 0 to 4,294,967,295)","title":"Fields"},{"location":"api/#uint64","text":"64-bit unsigned integer message type.","title":"UInt64"},{"location":"api/#fields_8","text":"data : int - Integer data (range: 0 to 18,446,744,073,709,551,615)","title":"Fields"},{"location":"api/#float32","text":"32-bit floating point message type.","title":"Float32"},{"location":"api/#fields_9","text":"data : float - Floating point data","title":"Fields"},{"location":"api/#float64","text":"64-bit floating point message type.","title":"Float64"},{"location":"api/#fields_10","text":"data : float - Floating point data","title":"Fields"},{"location":"api/#bool","text":"Boolean message type.","title":"Bool"},{"location":"api/#fields_11","text":"data : bool - Boolean data (True or False)","title":"Fields"},{"location":"api/#empty","text":"Empty message type.","title":"Empty"},{"location":"api/#fields_12","text":"None","title":"Fields"},{"location":"api/#time","text":"Time message type.","title":"Time"},{"location":"api/#fields_13","text":"secs : int - Seconds nsecs : int - Nanoseconds","title":"Fields"},{"location":"api/#duration","text":"Duration message type.","title":"Duration"},{"location":"api/#fields_14","text":"secs : int - Seconds nsecs : int - Nanoseconds","title":"Fields"},{"location":"api/#multiarraydimension","text":"Dimension description for multi-dimensional arrays.","title":"MultiArrayDimension"},{"location":"api/#fields_15","text":"label : str - Label for the dimension size : int - Size of the dimension stride : int - Stride of the dimension","title":"Fields"},{"location":"api/#multiarraylayout","text":"Layout description for multi-dimensional arrays.","title":"MultiArrayLayout"},{"location":"api/#fields_16","text":"dim : List[MultiArrayDimension] - Array of dimension properties data_offset : int - Offset to first data point in the array","title":"Fields"},{"location":"api/#bytemultiarray","text":"Multi-array of bytes.","title":"ByteMultiArray"},{"location":"api/#fields_17","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of bytes","title":"Fields"},{"location":"api/#int8multiarray","text":"Multi-array of Int8 values.","title":"Int8MultiArray"},{"location":"api/#fields_18","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of Int8 values","title":"Fields"},{"location":"api/#int16multiarray","text":"Multi-array of Int16 values.","title":"Int16MultiArray"},{"location":"api/#fields_19","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of Int16 values","title":"Fields"},{"location":"api/#int32multiarray","text":"Multi-array of Int32 values.","title":"Int32MultiArray"},{"location":"api/#fields_20","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of Int32 values","title":"Fields"},{"location":"api/#int64multiarray","text":"Multi-array of Int64 values.","title":"Int64MultiArray"},{"location":"api/#fields_21","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of Int64 values","title":"Fields"},{"location":"api/#uint8multiarray","text":"Multi-array of UInt8 values.","title":"UInt8MultiArray"},{"location":"api/#fields_22","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt8 values","title":"Fields"},{"location":"api/#uint16multiarray","text":"Multi-array of UInt16 values.","title":"UInt16MultiArray"},{"location":"api/#fields_23","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt16 values","title":"Fields"},{"location":"api/#uint32multiarray","text":"Multi-array of UInt32 values.","title":"UInt32MultiArray"},{"location":"api/#fields_24","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt32 values","title":"Fields"},{"location":"api/#uint64multiarray","text":"Multi-array of UInt64 values.","title":"UInt64MultiArray"},{"location":"api/#fields_25","text":"layout : MultiArrayLayout - Message layout data : List[int] - Array of UInt64 values","title":"Fields"},{"location":"api/#float32multiarray","text":"Multi-array of Float32 values.","title":"Float32MultiArray"},{"location":"api/#fields_26","text":"layout : MultiArrayLayout - Message layout data : List[float] - Array of Float32 values","title":"Fields"},{"location":"api/#float64multiarray","text":"Multi-array of Float64 values.","title":"Float64MultiArray"},{"location":"api/#fields_27","text":"layout : MultiArrayLayout - Message layout data : List[float] - Array of Float64 values","title":"Fields"},{"location":"api/#qos-classes","text":"","title":"\ud83d\udccb QoS Classes"},{"location":"api/#reliabilitypolicy","text":"Reliability policy for message delivery. RELIABLE : Guaranteed delivery BEST_EFFORT : No guarantee of delivery","title":"ReliabilityPolicy"},{"location":"api/#durabilitypolicy","text":"Durability policy for message persistence. TRANSIENT_LOCAL : Replays last message for late subscribers VOLATILE : No message replay","title":"DurabilityPolicy"},{"location":"api/#qosprofile","text":"Quality of Service profile defining communication policies.","title":"QoSProfile"},{"location":"api/#constructor_1","text":"QoSProfile ( reliability : ReliabilityPolicy = ReliabilityPolicy . RELIABLE , durability : DurabilityPolicy = DurabilityPolicy . VOLATILE , depth : int = 10 )","title":"Constructor"},{"location":"api/#fields_28","text":"reliability : ReliabilityPolicy - Message delivery reliability durability : DurabilityPolicy - Message persistence policy depth : int - Queue depth for messages","title":"Fields"},{"location":"api/#publisher-class","text":"","title":"\ud83d\udce2 Publisher Class"},{"location":"api/#constructor_2","text":"Publisher ( node : Node , msg_type : type , topic_name : str , qos_profile : QoSProfile ) node : Node - Parent node msg_type : type - Message type for this publisher topic_name : str - Topic name to publish to qos_profile : QoSProfile - Quality of Service profile","title":"Constructor"},{"location":"api/#methods_1","text":"","title":"Methods"},{"location":"api/#publish","text":"publish ( message : Message ) Publish a message to the topic. message : Message - Message to publish","title":"publish"},{"location":"api/#subscriber-class","text":"","title":"\ud83d\udce1 Subscriber Class"},{"location":"api/#constructor_3","text":"Subscriber ( node : Node , msg_type : type , topic_name : str , callback : Callable , qos_profile : QoSProfile ) node : Node - Parent node msg_type : type - Message type for this subscription topic_name : str - Topic name to subscribe to callback : Callable - Callback function for received messages qos_profile : QoSProfile - Quality of Service profile","title":"Constructor"},{"location":"api/#service-class","text":"","title":"\ud83e\udd1d Service Class"},{"location":"api/#constructor_4","text":"Service ( node : Node , srv_type : type , service_name : str , callback : Callable , qos_profile : QoSProfile ) node : Node - Parent node srv_type : type - Service type service_name : str - Service name callback : Callable - Callback function for service requests qos_profile : QoSProfile - Quality of Service profile","title":"Constructor"},{"location":"api/#client-class","text":"","title":"\ud83d\udcde Client Class"},{"location":"api/#constructor_5","text":"Client ( node : Node , srv_type : type , service_name : str , qos_profile : QoSProfile ) node : Node - Parent node srv_type : type - Service type service_name : str - Service name to call qos_profile : QoSProfile - Quality of Service profile","title":"Constructor"},{"location":"api/#methods_2","text":"","title":"Methods"},{"location":"api/#call","text":"call ( request ) Call a service synchronously. request : Service request object Returns: Service response object","title":"call"},{"location":"api/#call_async","text":"call_async ( request ) Call a service asynchronously. request : Service request object Returns: Future object for the service response","title":"call_async"},{"location":"api/#discovery-class","text":"","title":"\ud83d\udd0d Discovery Class"},{"location":"api/#methods_3","text":"","title":"Methods"},{"location":"api/#get_all_topics","text":"get_all_topics () -> List [ str ] Get all available topics. Returns: List of topic names","title":"get_all_topics"},{"location":"api/#get_all_services","text":"get_all_services () -> List [ str ] Get all available services. Returns: List of service names","title":"get_all_services"},{"location":"api/#get_topic_types","text":"get_topic_types ( topic_name : str ) -> List [ str ] Get the types of a topic. topic_name : Name of the topic Returns: List of topic types","title":"get_topic_types"},{"location":"api/#get_service_types","text":"get_service_types ( service_name : str ) -> List [ str ] Get the types of a service. service_name : Name of the service Returns: List of service types","title":"get_service_types"},{"location":"api/#get_nodes","text":"get_nodes () -> List [ str ] Get all available nodes. Returns: List of node names","title":"get_nodes"},{"location":"api/#bridge-class","text":"The bridge class provides functionality to interact with native ROS systems.","title":"\ud83c\udf09 Bridge Class"},{"location":"api/#constructor_6","text":"Bridge ( host : str = \"localhost\" , port : int = 11311 ) host : str - ROS master host (default: \"localhost\") port : int - ROS master port (default: 11311)","title":"Constructor"},{"location":"api/#methods_4","text":"","title":"Methods"},{"location":"api/#connect","text":"connect () Connect to the ROS master. Raises BridgeConnectionError if connection fails.","title":"connect"},{"location":"api/#discover_ros_nodes","text":"discover_ros_nodes () -> List [ str ] Discover all native ROS nodes. Returns: List of node names","title":"discover_ros_nodes"},{"location":"api/#discover_ros_topics","text":"discover_ros_topics () -> List [ Dict [ str , Any ]] Discover all native ROS topics. Returns: List of dictionaries with topic information","title":"discover_ros_topics"},{"location":"api/#discover_ros_services","text":"discover_ros_services () -> List [ Dict [ str , Any ]] Discover all native ROS services. Returns: List of dictionaries with service information","title":"discover_ros_services"},{"location":"api/#messagetranslator-class","text":"Handles translation between Python ROS engine messages and native ROS messages.","title":"\ud83d\udd04 MessageTranslator Class"},{"location":"api/#methods_5","text":"","title":"Methods"},{"location":"api/#pyros_to_ros","text":"pyros_to_ros ( message : Message , ros_message_type : str ) -> Dict [ str , Any ] Translate a Python ROS engine message to a native ROS message format. message : Python ROS engine message ros_message_type : Native ROS message type (e.g., \"std_msgs/String\") Returns: Dict - Native ROS message in dictionary format","title":"pyros_to_ros"},{"location":"api/#ros_to_pyros","text":"ros_to_pyros ( ros_message : Dict [ str , Any ], pyros_message_type : Type [ Message ]) -> Message Translate a native ROS message to a Python ROS engine message. ros_message : Native ROS message in dictionary format pyros_message_type : Python ROS engine message type Returns: Message - Python ROS engine message","title":"ros_to_pyros"},{"location":"api/#get_pyros_type","text":"get_pyros_type ( ros_message_type : str ) -> Type [ Message ] Get the corresponding Python ROS engine message type for a native ROS message type. ros_message_type : Native ROS message type (e.g., \"std_msgs/String\") Returns: Type[Message] - Corresponding Python ROS engine message type","title":"get_pyros_type"},{"location":"api/#get_ros_type","text":"get_ros_type ( pyros_message_type : Type [ Message ]) -> str Get the corresponding native ROS message type for a Python ROS engine message type. pyros_message_type : Python ROS engine message type Returns: str - Corresponding native ROS message type","title":"get_ros_type"},{"location":"api/#launchsystem-class","text":"The launch system for managing multiple nodes and providing system status information.","title":"\ud83d\ude80 LaunchSystem Class"},{"location":"api/#constructor_7","text":"LaunchSystem ()","title":"Constructor"},{"location":"api/#methods_6","text":"","title":"Methods"},{"location":"api/#add_node","text":"add_node ( node_name : str , node_class : type , * args , ** kwargs ) Add a node to the launch system. node_name : Name to register the node under node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node"},{"location":"api/#add_node_from_file","text":"add_node_from_file ( node_name : str , file_path : str , class_name : str , * args , ** kwargs ) Add a node to the launch system from a Python file. node_name : Name to register the node under file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node_from_file"},{"location":"api/#remove_node","text":"remove_node ( node_name : str ) Remove a node from the launch system. node_name : Name of the node to remove","title":"remove_node"},{"location":"api/#start","text":"start () Start all nodes in the launch system.","title":"start"},{"location":"api/#shutdown","text":"shutdown () Shutdown all nodes in the launch system.","title":"shutdown"},{"location":"api/#get_system_status","text":"get_system_status () -> Dict [ str , Any ] Get the status of the entire system. Returns: Dict containing system status information","title":"get_system_status"},{"location":"api/#print_system_status","text":"print_system_status () Print the status of the entire system in a human-readable format.","title":"print_system_status"},{"location":"api/#launchdescription-class","text":"Description of a launch system configuration.","title":"\ud83d\udcc4 LaunchDescription Class"},{"location":"api/#constructor_8","text":"LaunchDescription ( launch_system : LaunchSystem = None ) Initialize a launch description. launch_system : Optional LaunchSystem to use","title":"Constructor"},{"location":"api/#methods_7","text":"","title":"Methods"},{"location":"api/#add_node_1","text":"add_node ( node_class : type , * args , ** kwargs ) Add a node action to the launch description. node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node"},{"location":"api/#add_node_from_file_1","text":"add_node_from_file ( file_path : str , class_name : str , * args , ** kwargs ) Add a node action from a Python file to the launch description. file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node_from_file"},{"location":"api/#execute","text":"execute () Execute all actions in the launch description.","title":"execute"},{"location":"bridging/","text":"\ud83c\udf09 Bridging with Native ROS \u00b6 The Python ROS engine provides capabilities to discover and interact with native ROS nodes. \ud83c\udfd7\ufe0f Bridge Architecture \u00b6 The bridge enables communication between Python ROS Engine and native ROS systems: graph LR A[Python ROS Engine] -- Message Translation --> B[(ROS Bridge)] B -- XMLRPC/Socket --> C[ROS Master] B -- TCP/UDP --> D[Native ROS Nodes] A -- TCP/UDP --> E[Native ROS Nodes] Here's a sequence diagram showing the discovery process: sequenceDiagram participant PyROSNode participant Bridge participant ROSMaster PyROSNode->>Bridge: connect() Bridge->>ROSMaster: XMLRPC discovery request ROSMaster->>Bridge: discovery response Bridge->>PyROSNode: return discovery data \ud83d\udd04 ROS Communication Patterns \u00b6 When bridging with native ROS, various communication patterns are supported: graph TD A[Communication Patterns] --> B[Topics - Publisher/Subscriber] A --> C[Services - Request/Response] A --> D[Parameters - Key/Value Storage] B --> B1[Asynchronous Messaging] C --> C1[Synchronous Communication] D --> D1[Configuration Management] \ud83d\udd0c Bridge Connection \u00b6 The bridge connects to the ROS master using XMLRPC protocol: from pyros2 import Bridge # Default connection (localhost:11311) bridge = Bridge () # Custom connection bridge = Bridge ( \"192.168.1.100\" , 11312 ) \ud83d\udd0d Discovering ROS Nodes \u00b6 from pyros2 import Bridge bridge = Bridge () try : bridge . connect () nodes = bridge . discover_ros_nodes () print ( \"Discovered ROS nodes:\" ) for node in nodes : print ( f \" - { node } \" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" ) \ud83d\udd0d Discovering ROS Topics \u00b6 from pyros2 import Bridge bridge = Bridge () try : bridge . connect () topics = bridge . discover_ros_topics () print ( \"Discovered ROS topics:\" ) for topic in topics : print ( f \" - { topic [ 'name' ] } (type: { topic [ 'type' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" ) \ud83d\udd0d Discovering ROS Services \u00b6 from pyros2 import Bridge bridge = Bridge () try : bridge . connect () services = bridge . discover_ros_services () print ( \"Discovered ROS services:\" ) for service in services : print ( f \" - { service [ 'name' ] } (providers: { service [ 'providers' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" ) \u2705 Requirements for Bridging \u00b6 To use the bridging capabilities, you need: \ud83e\udd16 A running ROS master (ROS1) \ud83c\udf10 Network connectivity to the ROS master \ud83d\udd10 Proper permissions to access the ROS master \u2699\ufe0f Setting up ROS Master \u00b6 If you don't have ROS installed, you can run a simple ROS master using roscore: roscore This will start the ROS master on localhost:11311 by default. \u26a0\ufe0f Limitations \u00b6 The current bridging implementation: Only supports ROS1 master discovery Does not support message translation between Python ROS engine and native ROS Does not support parameter synchronization Does not support service request/response translation Future versions will expand these capabilities to provide full interoperability with native ROS systems.","title":"Bridging with Native ROS"},{"location":"bridging/#bridging-with-native-ros","text":"The Python ROS engine provides capabilities to discover and interact with native ROS nodes.","title":"\ud83c\udf09 Bridging with Native ROS"},{"location":"bridging/#bridge-architecture","text":"The bridge enables communication between Python ROS Engine and native ROS systems: graph LR A[Python ROS Engine] -- Message Translation --> B[(ROS Bridge)] B -- XMLRPC/Socket --> C[ROS Master] B -- TCP/UDP --> D[Native ROS Nodes] A -- TCP/UDP --> E[Native ROS Nodes] Here's a sequence diagram showing the discovery process: sequenceDiagram participant PyROSNode participant Bridge participant ROSMaster PyROSNode->>Bridge: connect() Bridge->>ROSMaster: XMLRPC discovery request ROSMaster->>Bridge: discovery response Bridge->>PyROSNode: return discovery data","title":"\ud83c\udfd7\ufe0f Bridge Architecture"},{"location":"bridging/#ros-communication-patterns","text":"When bridging with native ROS, various communication patterns are supported: graph TD A[Communication Patterns] --> B[Topics - Publisher/Subscriber] A --> C[Services - Request/Response] A --> D[Parameters - Key/Value Storage] B --> B1[Asynchronous Messaging] C --> C1[Synchronous Communication] D --> D1[Configuration Management]","title":"\ud83d\udd04 ROS Communication Patterns"},{"location":"bridging/#bridge-connection","text":"The bridge connects to the ROS master using XMLRPC protocol: from pyros2 import Bridge # Default connection (localhost:11311) bridge = Bridge () # Custom connection bridge = Bridge ( \"192.168.1.100\" , 11312 )","title":"\ud83d\udd0c Bridge Connection"},{"location":"bridging/#discovering-ros-nodes","text":"from pyros2 import Bridge bridge = Bridge () try : bridge . connect () nodes = bridge . discover_ros_nodes () print ( \"Discovered ROS nodes:\" ) for node in nodes : print ( f \" - { node } \" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" )","title":"\ud83d\udd0d Discovering ROS Nodes"},{"location":"bridging/#discovering-ros-topics","text":"from pyros2 import Bridge bridge = Bridge () try : bridge . connect () topics = bridge . discover_ros_topics () print ( \"Discovered ROS topics:\" ) for topic in topics : print ( f \" - { topic [ 'name' ] } (type: { topic [ 'type' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" )","title":"\ud83d\udd0d Discovering ROS Topics"},{"location":"bridging/#discovering-ros-services","text":"from pyros2 import Bridge bridge = Bridge () try : bridge . connect () services = bridge . discover_ros_services () print ( \"Discovered ROS services:\" ) for service in services : print ( f \" - { service [ 'name' ] } (providers: { service [ 'providers' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect: { e } \" )","title":"\ud83d\udd0d Discovering ROS Services"},{"location":"bridging/#requirements-for-bridging","text":"To use the bridging capabilities, you need: \ud83e\udd16 A running ROS master (ROS1) \ud83c\udf10 Network connectivity to the ROS master \ud83d\udd10 Proper permissions to access the ROS master","title":"\u2705 Requirements for Bridging"},{"location":"bridging/#setting-up-ros-master","text":"If you don't have ROS installed, you can run a simple ROS master using roscore: roscore This will start the ROS master on localhost:11311 by default.","title":"\u2699\ufe0f Setting up ROS Master"},{"location":"bridging/#limitations","text":"The current bridging implementation: Only supports ROS1 master discovery Does not support message translation between Python ROS engine and native ROS Does not support parameter synchronization Does not support service request/response translation Future versions will expand these capabilities to provide full interoperability with native ROS systems.","title":"\u26a0\ufe0f Limitations"},{"location":"contributing/","text":"\ud83e\udd1d Contributing to Python ROS Engine \u00b6 Thank you for your interest in contributing to the Python ROS Engine! We welcome contributions from the community to help improve this pure Python implementation of ROS2 functionality. \ud83d\udccb Table of Contents \u00b6 Code of Conduct \ud83d\ude80 Getting Started \ud83d\udca1 How to Contribute \u2699\ufe0f Development Setup \ud83d\udcbb Coding Standards \ud83e\uddea Testing \ud83d\udcd6 Documentation \ud83d\udd04 Pull Request Process \ud83d\udc1b Reporting Bugs \u2728 Requesting Features \ud83c\udfaf Code of Conduct \u00b6 This project adheres to a Code of Conduct adapted from the Contributor Covenant . By participating, you are expected to uphold this code. Please report unacceptable behavior to pyros@example.com. \ud83d\ude80 Getting Started \u00b6 Fork the repository on GitHub Clone your fork locally Set up the development environment (see Development Setup ) \ud83d\udca1 How to Contribute \u00b6 There are several ways you can contribute to this project: Report bugs and issues Suggest new features Improve documentation Write code to implement new features or fix bugs Review pull requests from other contributors \u2699\ufe0f Development Setup \u00b6 Ensure you have Python 3.8 or higher installed Create a virtual environment: python -m venv venv source venv/bin/activate # On Windows: venv\\Scripts\\activate Install the package in development mode: pip install -e . Install test dependencies: pip install -e . [ test ] \ud83d\udcbb Coding Standards \u00b6 We follow the PEP 8 style guide for Python code. Additionally: Use type hints for all function parameters and return values Write docstrings for all public classes and methods using the Google Python Style Guide Keep functions and classes focused on a single responsibility Use dataclasses for message types when possible Ensure code is readable and well-commented where necessary \ud83e\uddea Testing \u00b6 All contributions must include appropriate tests. We use pytest for testing. To run all tests: python -m pytest tests/ -v To run tests with coverage: pip install pytest-cov python -m pytest tests/ --cov = src/ --cov-report = html \ud83d\udcd6 Documentation \u00b6 We maintain documentation in the docs/ directory. When adding new features or modifying existing functionality, please update the relevant documentation files. API documentation: docs/api.md Usage guide: docs/usage.md Bridging documentation: docs/bridging.md Documentation can be built and served locally using the build_docs.py script. See project_structure.md for details on how to use this script. \ud83d\udd04 Pull Request Process \u00b6 Ensure any install or build dependencies are removed before the end of the layer when doing a build Update the README.md and documentation files with details of changes to the interface, including new environment variables, exposed ports, useful file locations, and container parameters Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer Your Pull Request will be reviewed by maintainers, who may request changes Once approved, your Pull Request will be merged \ud83d\udc1b Reporting Bugs \u00b6 Please use the GitHub issue tracker to report bugs. When filing an issue, please include: A clear and descriptive title Steps to reproduce the bug Expected behavior Actual behavior Any relevant error messages or logs Information about your environment (Python version, OS, etc.) \u2728 Requesting Features \u00b6 We welcome feature requests! Please use the GitHub issue tracker and include: A clear and descriptive title A detailed description of the proposed feature The motivation for the feature How the feature would be used","title":"Contributing"},{"location":"contributing/#contributing-to-python-ros-engine","text":"Thank you for your interest in contributing to the Python ROS Engine! We welcome contributions from the community to help improve this pure Python implementation of ROS2 functionality.","title":"\ud83e\udd1d Contributing to Python ROS Engine"},{"location":"contributing/#table-of-contents","text":"Code of Conduct \ud83d\ude80 Getting Started \ud83d\udca1 How to Contribute \u2699\ufe0f Development Setup \ud83d\udcbb Coding Standards \ud83e\uddea Testing \ud83d\udcd6 Documentation \ud83d\udd04 Pull Request Process \ud83d\udc1b Reporting Bugs \u2728 Requesting Features","title":"\ud83d\udccb Table of Contents"},{"location":"contributing/#code-of-conduct","text":"This project adheres to a Code of Conduct adapted from the Contributor Covenant . By participating, you are expected to uphold this code. Please report unacceptable behavior to pyros@example.com.","title":"\ud83c\udfaf Code of Conduct"},{"location":"contributing/#getting-started","text":"Fork the repository on GitHub Clone your fork locally Set up the development environment (see Development Setup )","title":"\ud83d\ude80 Getting Started"},{"location":"contributing/#how-to-contribute","text":"There are several ways you can contribute to this project: Report bugs and issues Suggest new features Improve documentation Write code to implement new features or fix bugs Review pull requests from other contributors","title":"\ud83d\udca1 How to Contribute"},{"location":"contributing/#development-setup","text":"Ensure you have Python 3.8 or higher installed Create a virtual environment: python -m venv venv source venv/bin/activate # On Windows: venv\\Scripts\\activate Install the package in development mode: pip install -e . Install test dependencies: pip install -e . [ test ]","title":"\u2699\ufe0f Development Setup"},{"location":"contributing/#coding-standards","text":"We follow the PEP 8 style guide for Python code. Additionally: Use type hints for all function parameters and return values Write docstrings for all public classes and methods using the Google Python Style Guide Keep functions and classes focused on a single responsibility Use dataclasses for message types when possible Ensure code is readable and well-commented where necessary","title":"\ud83d\udcbb Coding Standards"},{"location":"contributing/#testing","text":"All contributions must include appropriate tests. We use pytest for testing. To run all tests: python -m pytest tests/ -v To run tests with coverage: pip install pytest-cov python -m pytest tests/ --cov = src/ --cov-report = html","title":"\ud83e\uddea Testing"},{"location":"contributing/#documentation","text":"We maintain documentation in the docs/ directory. When adding new features or modifying existing functionality, please update the relevant documentation files. API documentation: docs/api.md Usage guide: docs/usage.md Bridging documentation: docs/bridging.md Documentation can be built and served locally using the build_docs.py script. See project_structure.md for details on how to use this script.","title":"\ud83d\udcd6 Documentation"},{"location":"contributing/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build Update the README.md and documentation files with details of changes to the interface, including new environment variables, exposed ports, useful file locations, and container parameters Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer Your Pull Request will be reviewed by maintainers, who may request changes Once approved, your Pull Request will be merged","title":"\ud83d\udd04 Pull Request Process"},{"location":"contributing/#reporting-bugs","text":"Please use the GitHub issue tracker to report bugs. When filing an issue, please include: A clear and descriptive title Steps to reproduce the bug Expected behavior Actual behavior Any relevant error messages or logs Information about your environment (Python version, OS, etc.)","title":"\ud83d\udc1b Reporting Bugs"},{"location":"contributing/#requesting-features","text":"We welcome feature requests! Please use the GitHub issue tracker and include: A clear and descriptive title A detailed description of the proposed feature The motivation for the feature How the feature would be used","title":"\u2728 Requesting Features"},{"location":"examples/","text":"\ud83e\uddea Examples \u00b6 The Python ROS Engine comes with several examples demonstrating its core functionality. These examples can be found in the examples/ directory of the repository. \ud83c\udfd7\ufe0f System Architecture \u00b6 The examples demonstrate various aspects of the Python ROS Engine architecture: graph TD A[Examples System] --> B[Publisher Node] A --> C[Subscriber Node] A --> D[Service Node] A --> E[Client Node] A --> F[Bridge Node] A --> G[Launch System] B --> H[(Topics)] C --> H E --> I[(Services)] D --> I Here's a sequence diagram showing the interaction between the publisher and subscriber nodes in the examples: sequenceDiagram participant PublisherNode participant Topic participant SubscriberNode PublisherNode->>Topic: Publish message Topic->>SubscriberNode: Deliver message SubscriberNode->>SubscriberNode: Process message in callback And here's a sequence diagram showing the service/client interaction: sequenceDiagram participant ClientNode participant ServiceNode ClientNode->>ServiceNode: Service request ServiceNode->>ServiceNode: Process request in callback ServiceNode->>ClientNode: Return response ClientNode->>ClientNode: Handle response \ud83d\udce4 Publisher Example \u00b6 This example demonstrates how to create a node with a publisher that sends messages to a topic. \"\"\"Example publisher node for the Python ROS engine.\"\"\" import time from pyros2 import Node from pyros2.message import String class PublisherNode ( Node ): \"\"\"Example publisher node.\"\"\" def __init__ ( self ): \"\"\"Initialize the publisher node.\"\"\" super () . __init__ ( \"publisher_node\" ) self . publisher = self . create_publisher ( String , \"/example_topic\" ) self . counter = 0 def publish_message ( self ): \"\"\"Publish a message to the topic.\"\"\" msg = String () msg . data = f \"Hello World! Counter: { self . counter } \" self . publisher . publish ( msg ) self . get_logger () . info ( f \"Published: { msg . data } \" ) self . counter += 1 def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the publisher node.\"\"\" node = PublisherNode () try : while True : node . publish_message () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"Shutting down publisher node...\" ) node . destroy_node () if __name__ == \"__main__\" : main () \ud83d\udce5 Subscriber Example \u00b6 This example demonstrates how to create a node with a subscriber that listens to messages on a topic. \"\"\"Example subscriber node for the Python ROS engine.\"\"\" from pyros2 import Node from pyros2.message import String class SubscriberNode ( Node ): \"\"\"Example subscriber node.\"\"\" def __init__ ( self ): \"\"\"Initialize the subscriber node.\"\"\" super () . __init__ ( \"subscriber_node\" ) self . subscription = self . create_subscription ( String , \"/example_topic\" , self . message_callback ) def message_callback ( self , msg ): \"\"\"Handle received messages.\"\"\" self . get_logger () . info ( f \"Received: { msg . data } \" ) def get_logger ( self ): \"\"\"Create a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the subscriber node.\"\"\" node = SubscriberNode () try : print ( \"Subscriber node running... Press Ctrl+C to stop.\" ) node . spin () except KeyboardInterrupt : print ( \"Shutting down subscriber node...\" ) node . destroy_node () if __name__ == \"__main__\" : main () \ud83d\udee0\ufe0f Service Example \u00b6 This example demonstrates how to create a node that provides a service. \"\"\"Example service node for the Python ROS engine.\"\"\" from pyros2 import Node class AddTwoIntsService : \"\"\"Mock service type for addition.\"\"\" class Request : \"\"\"Request containing two integers to add.\"\"\" def __init__ ( self , a = 0 , b = 0 ): \"\"\"Initialize with two integers.\"\"\" self . a = a self . b = b class Response : \"\"\"Response containing the sum of two integers.\"\"\" def __init__ ( self , sum = 0 ): \"\"\"Initialize with sum value.\"\"\" self . sum = sum class ServiceNode ( Node ): \"\"\"Example service node.\"\"\" def __init__ ( self ): \"\"\"Initialize the service node.\"\"\" super () . __init__ ( \"service_node\" ) self . service = self . create_service ( AddTwoIntsService , \"/add_two_ints\" , self . add_two_ints_callback ) def add_two_ints_callback ( self , request ): \"\"\"Handle service requests for adding two integers.\"\"\" response = AddTwoIntsService . Response () response . sum = request . a + request . b self . get_logger () . info ( f \"Adding { request . a } + { request . b } = { response . sum } \" ) return response def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the service node.\"\"\" node = ServiceNode () try : print ( \"Service node running... Press Ctrl+C to stop.\" ) node . spin () except KeyboardInterrupt : print ( \"Shutting down service node...\" ) node . destroy_node () if __name__ == \"__main__\" : main () \ud83d\udcde Client Example \u00b6 This example demonstrates how to create a node that calls a service. \"\"\"Example client node for the Python ROS engine.\"\"\" import time from pyros2 import Node class AddTwoIntsService : \"\"\"Service definition for adding two integers.\"\"\" class Request : \"\"\"Request for adding two integers.\"\"\" def __init__ ( self , a = 0 , b = 0 ): \"\"\"Initialize the request with two integers.\"\"\" self . a = a self . b = b class Response : \"\"\"Response containing the sum of two integers.\"\"\" def __init__ ( self , sum = 0 ): \"\"\"Initialize the response with the sum.\"\"\" self . sum = sum class ClientNode ( Node ): \"\"\"Example client node.\"\"\" def __init__ ( self ): \"\"\"Initialize the client node.\"\"\" super () . __init__ ( \"client_node\" ) self . client = self . create_client ( AddTwoIntsService , \"/add_two_ints\" ) def send_request ( self , a , b ): \"\"\"Send a request to the service.\"\"\" request = AddTwoIntsService . Request () request . a = a request . b = b try : response = self . client . call ( request ) self . get_logger () . info ( f \"Result: { a } + { b } = { response . sum } \" ) return response except Exception as e : self . get_logger () . error ( f \"Service call failed: { e } \" ) return None def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) def error ( self , message ): print ( f \"[ERROR] { message } \" ) return Logger () def main (): \"\"\"Run the client example.\"\"\" node = ClientNode () try : # Send a few requests for i in range ( 5 ): node . send_request ( i , i + 1 ) time . sleep ( 1 ) except KeyboardInterrupt : print ( \"Shutting down client node...\" ) node . destroy_node () if __name__ == \"__main__\" : main () \ud83c\udf09 Bridge Example \u00b6 This example demonstrates how to use the bridge functionality to discover native ROS nodes, topics, and services. \"\"\"Example bridge usage for the Python ROS engine.\"\"\" from pyros2 import Bridge from pyros2.exceptions import BridgeConnectionError def main (): \"\"\"Run the bridge example.\"\"\" # Create bridge connection bridge = Bridge () try : # Connect to ROS master bridge . connect () print ( \"Connected to ROS master successfully!\" ) # Discover ROS nodes nodes = bridge . discover_ros_nodes () print ( f \"Discovered { len ( nodes ) } ROS nodes:\" ) for node in nodes : print ( f \" - { node } \" ) # Discover ROS topics topics = bridge . discover_ros_topics () print ( f \"Discovered { len ( topics ) } ROS topics:\" ) for topic in topics : print ( f \" - { topic [ 'name' ] } (type: { topic [ 'type' ] } )\" ) # Discover ROS services services = bridge . discover_ros_services () print ( f \"Discovered { len ( services ) } ROS services:\" ) for service in services : print ( f \" - { service [ 'name' ] } (providers: { service [ 'providers' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect to ROS master: { e } \" ) print ( \"Make sure ROS master is running on localhost:11311\" ) except Exception as e : print ( f \"An error occurred: { e } \" ) if __name__ == \"__main__\" : main () \ud83d\ude80 Launch System Examples \u00b6 These examples demonstrate how to use the launch system to manage multiple nodes. \ud83d\udcdd Launch Description Example \u00b6 This example shows how to create a launch description programmatically: \"\"\"Example showing how to use the launch system programmatically.\"\"\" import time from pyros2 import LaunchDescription , LaunchSystem from pyros2.message import String class SimplePublisherNode : \"\"\"A simple publisher node for demonstration.\"\"\" def __init__ ( self ): \"\"\"Initialize the publisher node.\"\"\" from pyros2 import Node self . node = Node ( \"simple_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/simple_topic\" ) self . counter = 0 def publish_message ( self ): \"\"\"Publish a message to the topic.\"\"\" msg = String () msg . data = f \"Simple message { self . counter } \" self . publisher . publish ( msg ) self . counter += 1 class SimpleSubscriberNode : \"\"\"A simple subscriber node for demonstration.\"\"\" def __init__ ( self ): \"\"\"Initialize the subscriber node.\"\"\" from pyros2 import Node self . node = Node ( \"simple_subscriber\" ) self . subscription = self . node . create_subscription ( String , \"/simple_topic\" , self . message_callback ) def message_callback ( self , msg ): \"\"\"Handle received messages.\"\"\" print ( f \"Received message: { msg . data } \" ) def main (): \"\"\"Demonstrate launch system usage.\"\"\" # Method 1: Using LaunchSystem directly print ( \"Method 1: Using LaunchSystem directly\" ) launch_system = LaunchSystem () # Add nodes launch_system . add_node ( \"publisher\" , SimplePublisherNode ) launch_system . add_node ( \"subscriber\" , SimpleSubscriberNode ) # Print system status launch_system . print_system_status () # Start nodes (in a real implementation, this would run them) print ( \"Starting nodes...\" ) try : # Run for a few seconds start_time = time . time () while time . time () - start_time < 5 : # Publish a message every second publisher_node = launch_system . nodes [ \"publisher\" ] publisher_node . publish_message () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : launch_system . shutdown () print ( \" \\n \" + \"=\" * 50 + \" \\n \" ) # Method 2: Using LaunchDescription print ( \"Method 2: Using LaunchDescription\" ) launch_description = LaunchDescription () # Add nodes launch_description . add_node ( SimplePublisherNode ) launch_description . add_node ( SimpleSubscriberNode ) # Execute the launch description launch_system = launch_description . execute () # Print system status launch_system . print_system_status () if __name__ == \"__main__\" : main () \ud83d\udcc4 Launch File Example \u00b6 This example shows how to create a launch file that can be executed from the command line: \"\"\"Example launch file for the Python ROS engine.\"\"\" import os import sys from publisher_example import PublisherNode from subscriber_example import SubscriberNode from pyros2 import LaunchDescription # Add the examples directory to the path so we can import the example nodes examples_dir = os . path . join ( os . path . dirname ( __file__ ), \"..\" , \"..\" , \"examples\" ) sys . path . insert ( 0 , examples_dir ) def generate_launch_description (): \"\"\" Generate a launch description with a publisher and subscriber node. Returns: LaunchDescription: The launch description \"\"\" launch_description = LaunchDescription () # Add publisher node launch_description . add_node ( PublisherNode ) # Add subscriber node launch_description . add_node ( SubscriberNode ) return launch_description # Alternative way to define a launch description launch_description = LaunchDescription () # Add publisher node launch_description . add_node ( PublisherNode ) # Add subscriber node launch_description . add_node ( SubscriberNode ) \ud83c\udfaf Complete Example Project \u00b6 In addition to the basic examples, we've included a complete example project in the example_project/ directory that demonstrates how to build a robot system with multiple interconnected nodes. The complete example project includes: - \u2699\ufe0f Configuration files using Hydra for flexible parameter management - \ud83d\udd04 Publisher, subscriber, service, and client nodes - \ud83d\ude80 A launch system to run all nodes together as a cohesive robot system You can explore this complete example to understand how to structure a real-world application using the Python ROS Engine. \u25b6\ufe0f Running Examples \u00b6 To run any of these examples, make sure you have installed the Python ROS Engine: \ud83d\udcbb pip install python-ros-engine Then you can run the examples directly with Python: \ud83d\udcbb python examples/publisher_example.py \ud83d\udcbb python examples/subscriber_example.py \ud83d\udcbb python examples/service_example.py \ud83d\udcbb python examples/client_example.py \ud83d\udcbb python examples/bridge_example.py \ud83d\udcbb python examples/launch_system_example.py To run the launch file example: \ud83d\udcbb python -m pyros2.launch_cli examples/launch_example.py To just check the system status without starting the nodes: \ud83d\udcbb python -m pyros2.launch_cli examples/launch_example.py --status For the complete example project: \ud83d\udcbb python example_project/nodes/publisher_node.py \ud83d\udcbb python example_project/nodes/subscriber_node.py \ud83d\udcbb python example_project/nodes/service_node.py \ud83d\udcbb python example_project/nodes/client_node.py \ud83d\udcbb python example_project/launch/robot_system.py Note: For the bridge example to work, you need to have a ROS master running on localhost:11311.","title":"Examples"},{"location":"examples/#examples","text":"The Python ROS Engine comes with several examples demonstrating its core functionality. These examples can be found in the examples/ directory of the repository.","title":"\ud83e\uddea Examples"},{"location":"examples/#system-architecture","text":"The examples demonstrate various aspects of the Python ROS Engine architecture: graph TD A[Examples System] --> B[Publisher Node] A --> C[Subscriber Node] A --> D[Service Node] A --> E[Client Node] A --> F[Bridge Node] A --> G[Launch System] B --> H[(Topics)] C --> H E --> I[(Services)] D --> I Here's a sequence diagram showing the interaction between the publisher and subscriber nodes in the examples: sequenceDiagram participant PublisherNode participant Topic participant SubscriberNode PublisherNode->>Topic: Publish message Topic->>SubscriberNode: Deliver message SubscriberNode->>SubscriberNode: Process message in callback And here's a sequence diagram showing the service/client interaction: sequenceDiagram participant ClientNode participant ServiceNode ClientNode->>ServiceNode: Service request ServiceNode->>ServiceNode: Process request in callback ServiceNode->>ClientNode: Return response ClientNode->>ClientNode: Handle response","title":"\ud83c\udfd7\ufe0f System Architecture"},{"location":"examples/#publisher-example","text":"This example demonstrates how to create a node with a publisher that sends messages to a topic. \"\"\"Example publisher node for the Python ROS engine.\"\"\" import time from pyros2 import Node from pyros2.message import String class PublisherNode ( Node ): \"\"\"Example publisher node.\"\"\" def __init__ ( self ): \"\"\"Initialize the publisher node.\"\"\" super () . __init__ ( \"publisher_node\" ) self . publisher = self . create_publisher ( String , \"/example_topic\" ) self . counter = 0 def publish_message ( self ): \"\"\"Publish a message to the topic.\"\"\" msg = String () msg . data = f \"Hello World! Counter: { self . counter } \" self . publisher . publish ( msg ) self . get_logger () . info ( f \"Published: { msg . data } \" ) self . counter += 1 def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the publisher node.\"\"\" node = PublisherNode () try : while True : node . publish_message () time . sleep ( 1 ) except KeyboardInterrupt : print ( \"Shutting down publisher node...\" ) node . destroy_node () if __name__ == \"__main__\" : main ()","title":"\ud83d\udce4 Publisher Example"},{"location":"examples/#subscriber-example","text":"This example demonstrates how to create a node with a subscriber that listens to messages on a topic. \"\"\"Example subscriber node for the Python ROS engine.\"\"\" from pyros2 import Node from pyros2.message import String class SubscriberNode ( Node ): \"\"\"Example subscriber node.\"\"\" def __init__ ( self ): \"\"\"Initialize the subscriber node.\"\"\" super () . __init__ ( \"subscriber_node\" ) self . subscription = self . create_subscription ( String , \"/example_topic\" , self . message_callback ) def message_callback ( self , msg ): \"\"\"Handle received messages.\"\"\" self . get_logger () . info ( f \"Received: { msg . data } \" ) def get_logger ( self ): \"\"\"Create a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the subscriber node.\"\"\" node = SubscriberNode () try : print ( \"Subscriber node running... Press Ctrl+C to stop.\" ) node . spin () except KeyboardInterrupt : print ( \"Shutting down subscriber node...\" ) node . destroy_node () if __name__ == \"__main__\" : main ()","title":"\ud83d\udce5 Subscriber Example"},{"location":"examples/#service-example","text":"This example demonstrates how to create a node that provides a service. \"\"\"Example service node for the Python ROS engine.\"\"\" from pyros2 import Node class AddTwoIntsService : \"\"\"Mock service type for addition.\"\"\" class Request : \"\"\"Request containing two integers to add.\"\"\" def __init__ ( self , a = 0 , b = 0 ): \"\"\"Initialize with two integers.\"\"\" self . a = a self . b = b class Response : \"\"\"Response containing the sum of two integers.\"\"\" def __init__ ( self , sum = 0 ): \"\"\"Initialize with sum value.\"\"\" self . sum = sum class ServiceNode ( Node ): \"\"\"Example service node.\"\"\" def __init__ ( self ): \"\"\"Initialize the service node.\"\"\" super () . __init__ ( \"service_node\" ) self . service = self . create_service ( AddTwoIntsService , \"/add_two_ints\" , self . add_two_ints_callback ) def add_two_ints_callback ( self , request ): \"\"\"Handle service requests for adding two integers.\"\"\" response = AddTwoIntsService . Response () response . sum = request . a + request . b self . get_logger () . info ( f \"Adding { request . a } + { request . b } = { response . sum } \" ) return response def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) return Logger () def main (): \"\"\"Run the service node.\"\"\" node = ServiceNode () try : print ( \"Service node running... Press Ctrl+C to stop.\" ) node . spin () except KeyboardInterrupt : print ( \"Shutting down service node...\" ) node . destroy_node () if __name__ == \"__main__\" : main ()","title":"\ud83d\udee0\ufe0f Service Example"},{"location":"examples/#client-example","text":"This example demonstrates how to create a node that calls a service. \"\"\"Example client node for the Python ROS engine.\"\"\" import time from pyros2 import Node class AddTwoIntsService : \"\"\"Service definition for adding two integers.\"\"\" class Request : \"\"\"Request for adding two integers.\"\"\" def __init__ ( self , a = 0 , b = 0 ): \"\"\"Initialize the request with two integers.\"\"\" self . a = a self . b = b class Response : \"\"\"Response containing the sum of two integers.\"\"\" def __init__ ( self , sum = 0 ): \"\"\"Initialize the response with the sum.\"\"\" self . sum = sum class ClientNode ( Node ): \"\"\"Example client node.\"\"\" def __init__ ( self ): \"\"\"Initialize the client node.\"\"\" super () . __init__ ( \"client_node\" ) self . client = self . create_client ( AddTwoIntsService , \"/add_two_ints\" ) def send_request ( self , a , b ): \"\"\"Send a request to the service.\"\"\" request = AddTwoIntsService . Request () request . a = a request . b = b try : response = self . client . call ( request ) self . get_logger () . info ( f \"Result: { a } + { b } = { response . sum } \" ) return response except Exception as e : self . get_logger () . error ( f \"Service call failed: { e } \" ) return None def get_logger ( self ): \"\"\"Get a simple logger for demonstration.\"\"\" class Logger : def info ( self , message ): print ( f \"[INFO] { message } \" ) def error ( self , message ): print ( f \"[ERROR] { message } \" ) return Logger () def main (): \"\"\"Run the client example.\"\"\" node = ClientNode () try : # Send a few requests for i in range ( 5 ): node . send_request ( i , i + 1 ) time . sleep ( 1 ) except KeyboardInterrupt : print ( \"Shutting down client node...\" ) node . destroy_node () if __name__ == \"__main__\" : main ()","title":"\ud83d\udcde Client Example"},{"location":"examples/#bridge-example","text":"This example demonstrates how to use the bridge functionality to discover native ROS nodes, topics, and services. \"\"\"Example bridge usage for the Python ROS engine.\"\"\" from pyros2 import Bridge from pyros2.exceptions import BridgeConnectionError def main (): \"\"\"Run the bridge example.\"\"\" # Create bridge connection bridge = Bridge () try : # Connect to ROS master bridge . connect () print ( \"Connected to ROS master successfully!\" ) # Discover ROS nodes nodes = bridge . discover_ros_nodes () print ( f \"Discovered { len ( nodes ) } ROS nodes:\" ) for node in nodes : print ( f \" - { node } \" ) # Discover ROS topics topics = bridge . discover_ros_topics () print ( f \"Discovered { len ( topics ) } ROS topics:\" ) for topic in topics : print ( f \" - { topic [ 'name' ] } (type: { topic [ 'type' ] } )\" ) # Discover ROS services services = bridge . discover_ros_services () print ( f \"Discovered { len ( services ) } ROS services:\" ) for service in services : print ( f \" - { service [ 'name' ] } (providers: { service [ 'providers' ] } )\" ) except BridgeConnectionError as e : print ( f \"Failed to connect to ROS master: { e } \" ) print ( \"Make sure ROS master is running on localhost:11311\" ) except Exception as e : print ( f \"An error occurred: { e } \" ) if __name__ == \"__main__\" : main ()","title":"\ud83c\udf09 Bridge Example"},{"location":"examples/#launch-system-examples","text":"These examples demonstrate how to use the launch system to manage multiple nodes.","title":"\ud83d\ude80 Launch System Examples"},{"location":"examples/#launch-description-example","text":"This example shows how to create a launch description programmatically: \"\"\"Example showing how to use the launch system programmatically.\"\"\" import time from pyros2 import LaunchDescription , LaunchSystem from pyros2.message import String class SimplePublisherNode : \"\"\"A simple publisher node for demonstration.\"\"\" def __init__ ( self ): \"\"\"Initialize the publisher node.\"\"\" from pyros2 import Node self . node = Node ( \"simple_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/simple_topic\" ) self . counter = 0 def publish_message ( self ): \"\"\"Publish a message to the topic.\"\"\" msg = String () msg . data = f \"Simple message { self . counter } \" self . publisher . publish ( msg ) self . counter += 1 class SimpleSubscriberNode : \"\"\"A simple subscriber node for demonstration.\"\"\" def __init__ ( self ): \"\"\"Initialize the subscriber node.\"\"\" from pyros2 import Node self . node = Node ( \"simple_subscriber\" ) self . subscription = self . node . create_subscription ( String , \"/simple_topic\" , self . message_callback ) def message_callback ( self , msg ): \"\"\"Handle received messages.\"\"\" print ( f \"Received message: { msg . data } \" ) def main (): \"\"\"Demonstrate launch system usage.\"\"\" # Method 1: Using LaunchSystem directly print ( \"Method 1: Using LaunchSystem directly\" ) launch_system = LaunchSystem () # Add nodes launch_system . add_node ( \"publisher\" , SimplePublisherNode ) launch_system . add_node ( \"subscriber\" , SimpleSubscriberNode ) # Print system status launch_system . print_system_status () # Start nodes (in a real implementation, this would run them) print ( \"Starting nodes...\" ) try : # Run for a few seconds start_time = time . time () while time . time () - start_time < 5 : # Publish a message every second publisher_node = launch_system . nodes [ \"publisher\" ] publisher_node . publish_message () time . sleep ( 1 ) except KeyboardInterrupt : pass finally : launch_system . shutdown () print ( \" \\n \" + \"=\" * 50 + \" \\n \" ) # Method 2: Using LaunchDescription print ( \"Method 2: Using LaunchDescription\" ) launch_description = LaunchDescription () # Add nodes launch_description . add_node ( SimplePublisherNode ) launch_description . add_node ( SimpleSubscriberNode ) # Execute the launch description launch_system = launch_description . execute () # Print system status launch_system . print_system_status () if __name__ == \"__main__\" : main ()","title":"\ud83d\udcdd Launch Description Example"},{"location":"examples/#launch-file-example","text":"This example shows how to create a launch file that can be executed from the command line: \"\"\"Example launch file for the Python ROS engine.\"\"\" import os import sys from publisher_example import PublisherNode from subscriber_example import SubscriberNode from pyros2 import LaunchDescription # Add the examples directory to the path so we can import the example nodes examples_dir = os . path . join ( os . path . dirname ( __file__ ), \"..\" , \"..\" , \"examples\" ) sys . path . insert ( 0 , examples_dir ) def generate_launch_description (): \"\"\" Generate a launch description with a publisher and subscriber node. Returns: LaunchDescription: The launch description \"\"\" launch_description = LaunchDescription () # Add publisher node launch_description . add_node ( PublisherNode ) # Add subscriber node launch_description . add_node ( SubscriberNode ) return launch_description # Alternative way to define a launch description launch_description = LaunchDescription () # Add publisher node launch_description . add_node ( PublisherNode ) # Add subscriber node launch_description . add_node ( SubscriberNode )","title":"\ud83d\udcc4 Launch File Example"},{"location":"examples/#complete-example-project","text":"In addition to the basic examples, we've included a complete example project in the example_project/ directory that demonstrates how to build a robot system with multiple interconnected nodes. The complete example project includes: - \u2699\ufe0f Configuration files using Hydra for flexible parameter management - \ud83d\udd04 Publisher, subscriber, service, and client nodes - \ud83d\ude80 A launch system to run all nodes together as a cohesive robot system You can explore this complete example to understand how to structure a real-world application using the Python ROS Engine.","title":"\ud83c\udfaf Complete Example Project"},{"location":"examples/#running-examples","text":"To run any of these examples, make sure you have installed the Python ROS Engine: \ud83d\udcbb pip install python-ros-engine Then you can run the examples directly with Python: \ud83d\udcbb python examples/publisher_example.py \ud83d\udcbb python examples/subscriber_example.py \ud83d\udcbb python examples/service_example.py \ud83d\udcbb python examples/client_example.py \ud83d\udcbb python examples/bridge_example.py \ud83d\udcbb python examples/launch_system_example.py To run the launch file example: \ud83d\udcbb python -m pyros2.launch_cli examples/launch_example.py To just check the system status without starting the nodes: \ud83d\udcbb python -m pyros2.launch_cli examples/launch_example.py --status For the complete example project: \ud83d\udcbb python example_project/nodes/publisher_node.py \ud83d\udcbb python example_project/nodes/subscriber_node.py \ud83d\udcbb python example_project/nodes/service_node.py \ud83d\udcbb python example_project/nodes/client_node.py \ud83d\udcbb python example_project/launch/robot_system.py Note: For the bridge example to work, you need to have a ROS master running on localhost:11311.","title":"\u25b6\ufe0f Running Examples"},{"location":"installation/","text":"\u2699\ufe0f Installation Guide \u00b6 \ud83d\udccb Prerequisites \u00b6 Python 3.8 or higher pip (Python package installer) \ud83c\udfd7\ufe0f System Architecture \u00b6 Before installing, it's helpful to understand the overall architecture of the Python ROS Engine: graph TD A[Python ROS Engine] --> B[Core Functionality] A --> C[Bridging Capabilities] B --> B1[Node Management] B --> B2[Publishers/Subscribers] B --> B3[Services/Clients] B --> B4[Parameters] B --> B5[Timers] C --> C1[ROS1 Bridge] C --> C2[Message Translation] \ud83d\udce6 Installation Methods \u00b6 \ud83c\udf10 From PyPI (Recommended) \u00b6 To install the Python ROS Engine from PyPI, simply run: pip install python-ros-engine \ud83d\udcc2 From Source \u00b6 If you want to install from source, first clone the repository: git clone https://github.com/yhbcode000/python-ros-engine.git cd python-ros-engine Then install the package: pip install . \ud83d\udee0\ufe0f Development Installation \u00b6 For development purposes, you can install the package in editable mode with test dependencies: pip install -e . [ test ] This will install all dependencies needed for development and testing. \u2705 Verifying Installation \u00b6 After installation, you can verify that the package is correctly installed by running: python -c \"import pyros2; print('Python ROS Engine installed successfully')\" \ud83e\uddea Running Tests \u00b6 To run the tests, you'll need to install the test dependencies: pip install -e . [ test ] Then run the tests with pytest: python -m pytest tests/ -v","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"\u2699\ufe0f Installation Guide"},{"location":"installation/#prerequisites","text":"Python 3.8 or higher pip (Python package installer)","title":"\ud83d\udccb Prerequisites"},{"location":"installation/#system-architecture","text":"Before installing, it's helpful to understand the overall architecture of the Python ROS Engine: graph TD A[Python ROS Engine] --> B[Core Functionality] A --> C[Bridging Capabilities] B --> B1[Node Management] B --> B2[Publishers/Subscribers] B --> B3[Services/Clients] B --> B4[Parameters] B --> B5[Timers] C --> C1[ROS1 Bridge] C --> C2[Message Translation]","title":"\ud83c\udfd7\ufe0f System Architecture"},{"location":"installation/#installation-methods","text":"","title":"\ud83d\udce6 Installation Methods"},{"location":"installation/#from-pypi-recommended","text":"To install the Python ROS Engine from PyPI, simply run: pip install python-ros-engine","title":"\ud83c\udf10 From PyPI (Recommended)"},{"location":"installation/#from-source","text":"If you want to install from source, first clone the repository: git clone https://github.com/yhbcode000/python-ros-engine.git cd python-ros-engine Then install the package: pip install .","title":"\ud83d\udcc2 From Source"},{"location":"installation/#development-installation","text":"For development purposes, you can install the package in editable mode with test dependencies: pip install -e . [ test ] This will install all dependencies needed for development and testing.","title":"\ud83d\udee0\ufe0f Development Installation"},{"location":"installation/#verifying-installation","text":"After installation, you can verify that the package is correctly installed by running: python -c \"import pyros2; print('Python ROS Engine installed successfully')\"","title":"\u2705 Verifying Installation"},{"location":"installation/#running-tests","text":"To run the tests, you'll need to install the test dependencies: pip install -e . [ test ] Then run the tests with pytest: python -m pytest tests/ -v","title":"\ud83e\uddea Running Tests"},{"location":"launch/","text":"\ud83d\ude80 Launch System \u00b6 The launch system in Python ROS Engine provides a way to manage multiple nodes and monitor the overall system status. It allows you to start, stop, and monitor collections of nodes as a single unit. \u2699\ufe0f LaunchSystem Class \u00b6 The LaunchSystem class is the main interface for managing multiple nodes. Methods \u00b6 __init__() \u00b6 Initialize the launch system. add_node(node_name, node_class, *args, **kwargs) \u00b6 Add a node to the launch system. node_name : Name to register the node under node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization add_node_from_file(node_name, file_path, class_name, *args, **kwargs) \u00b6 Add a node to the launch system from a Python file. node_name : Name to register the node under file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization remove_node(node_name) \u00b6 Remove a node from the launch system. node_name : Name of the node to remove start() \u00b6 Start all nodes in the launch system. shutdown() \u00b6 Shutdown all nodes in the launch system. get_system_status() \u00b6 Get the status of the entire system as a dictionary. print_system_status() \u00b6 Print the status of the entire system in a human-readable format. \ud83d\udcc4 LaunchDescription Class \u00b6 The LaunchDescription class provides a declarative way to describe a launch configuration. Methods \u00b6 __init__(launch_system=None) \u00b6 Initialize a launch description. launch_system : Optional LaunchSystem to use (creates a new one if not provided) add_node(node_class, *args, **kwargs) \u00b6 Add a node action to the launch description. node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization add_node_from_file(file_path, class_name, *args, **kwargs) \u00b6 Add a node action from a Python file to the launch description. file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization execute() \u00b6 Execute all actions in the launch description and return the launch system. \ud83e\uddea Usage Examples \u00b6 \ud83d\udcbb Programmatic Usage \u00b6 from pyros2 import LaunchSystem from pyros2.message import String class MyPublisherNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/my_topic\" ) def publish_message ( self ): msg = String () msg . data = \"Hello World!\" self . publisher . publish ( msg ) # Create launch system launch_system = LaunchSystem () # Add nodes launch_system . add_node ( \"publisher\" , MyPublisherNode ) # Print system status launch_system . print_system_status () # Start the system launch_system . start () \ud83d\udcbb Declarative Usage \u00b6 from pyros2 import LaunchDescription from pyros2.message import String class MyPublisherNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/my_topic\" ) class MySubscriberNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_subscriber\" ) self . subscriber = self . node . create_subscription ( String , \"/my_topic\" , self . callback ) def callback ( self , msg ): print ( f \"Received: { msg . data } \" ) # Create launch description launch_description = LaunchDescription () # Add nodes launch_description . add_node ( MyPublisherNode ) launch_description . add_node ( MySubscriberNode ) # Execute the launch description launch_system = launch_description . execute () # Print system status launch_system . print_system_status () # Start the system launch_system . start () \ud83d\udcbb Launch File Usage \u00b6 You can also create launch files that can be executed from the command line: # launch_my_system.py from pyros2 import LaunchDescription from my_nodes import MyPublisherNode , MySubscriberNode def generate_launch_description (): launch_description = LaunchDescription () # Add nodes launch_description . add_node ( MyPublisherNode ) launch_description . add_node ( MySubscriberNode ) return launch_description Then run it from the command line: python -m pyros2.launch_cli launch_my_system.py To just check the system status without starting the nodes: python -m pyros2.launch_cli launch_my_system.py --status","title":"Launch System"},{"location":"launch/#launch-system","text":"The launch system in Python ROS Engine provides a way to manage multiple nodes and monitor the overall system status. It allows you to start, stop, and monitor collections of nodes as a single unit.","title":"\ud83d\ude80 Launch System"},{"location":"launch/#launchsystem-class","text":"The LaunchSystem class is the main interface for managing multiple nodes.","title":"\u2699\ufe0f LaunchSystem Class"},{"location":"launch/#methods","text":"","title":"Methods"},{"location":"launch/#__init__","text":"Initialize the launch system.","title":"__init__()"},{"location":"launch/#add_nodenode_name-node_class-args-kwargs","text":"Add a node to the launch system. node_name : Name to register the node under node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node(node_name, node_class, *args, **kwargs)"},{"location":"launch/#add_node_from_filenode_name-file_path-class_name-args-kwargs","text":"Add a node to the launch system from a Python file. node_name : Name to register the node under file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node_from_file(node_name, file_path, class_name, *args, **kwargs)"},{"location":"launch/#remove_nodenode_name","text":"Remove a node from the launch system. node_name : Name of the node to remove","title":"remove_node(node_name)"},{"location":"launch/#start","text":"Start all nodes in the launch system.","title":"start()"},{"location":"launch/#shutdown","text":"Shutdown all nodes in the launch system.","title":"shutdown()"},{"location":"launch/#get_system_status","text":"Get the status of the entire system as a dictionary.","title":"get_system_status()"},{"location":"launch/#print_system_status","text":"Print the status of the entire system in a human-readable format.","title":"print_system_status()"},{"location":"launch/#launchdescription-class","text":"The LaunchDescription class provides a declarative way to describe a launch configuration.","title":"\ud83d\udcc4 LaunchDescription Class"},{"location":"launch/#methods_1","text":"","title":"Methods"},{"location":"launch/#__init__launch_systemnone","text":"Initialize a launch description. launch_system : Optional LaunchSystem to use (creates a new one if not provided)","title":"__init__(launch_system=None)"},{"location":"launch/#add_nodenode_class-args-kwargs","text":"Add a node action to the launch description. node_class : The node class to instantiate *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node(node_class, *args, **kwargs)"},{"location":"launch/#add_node_from_filefile_path-class_name-args-kwargs","text":"Add a node action from a Python file to the launch description. file_path : Path to the Python file containing the node class class_name : Name of the node class in the file *args : Positional arguments for node initialization **kwargs : Keyword arguments for node initialization","title":"add_node_from_file(file_path, class_name, *args, **kwargs)"},{"location":"launch/#execute","text":"Execute all actions in the launch description and return the launch system.","title":"execute()"},{"location":"launch/#usage-examples","text":"","title":"\ud83e\uddea Usage Examples"},{"location":"launch/#programmatic-usage","text":"from pyros2 import LaunchSystem from pyros2.message import String class MyPublisherNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/my_topic\" ) def publish_message ( self ): msg = String () msg . data = \"Hello World!\" self . publisher . publish ( msg ) # Create launch system launch_system = LaunchSystem () # Add nodes launch_system . add_node ( \"publisher\" , MyPublisherNode ) # Print system status launch_system . print_system_status () # Start the system launch_system . start ()","title":"\ud83d\udcbb Programmatic Usage"},{"location":"launch/#declarative-usage","text":"from pyros2 import LaunchDescription from pyros2.message import String class MyPublisherNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_publisher\" ) self . publisher = self . node . create_publisher ( String , \"/my_topic\" ) class MySubscriberNode : def __init__ ( self ): from pyros2 import Node self . node = Node ( \"my_subscriber\" ) self . subscriber = self . node . create_subscription ( String , \"/my_topic\" , self . callback ) def callback ( self , msg ): print ( f \"Received: { msg . data } \" ) # Create launch description launch_description = LaunchDescription () # Add nodes launch_description . add_node ( MyPublisherNode ) launch_description . add_node ( MySubscriberNode ) # Execute the launch description launch_system = launch_description . execute () # Print system status launch_system . print_system_status () # Start the system launch_system . start ()","title":"\ud83d\udcbb Declarative Usage"},{"location":"launch/#launch-file-usage","text":"You can also create launch files that can be executed from the command line: # launch_my_system.py from pyros2 import LaunchDescription from my_nodes import MyPublisherNode , MySubscriberNode def generate_launch_description (): launch_description = LaunchDescription () # Add nodes launch_description . add_node ( MyPublisherNode ) launch_description . add_node ( MySubscriberNode ) return launch_description Then run it from the command line: python -m pyros2.launch_cli launch_my_system.py To just check the system status without starting the nodes: python -m pyros2.launch_cli launch_my_system.py --status","title":"\ud83d\udcbb Launch File Usage"},{"location":"license/","text":"\u2696\ufe0f Apache License \u00b6 Version 2.0, January 2004 http://www.apache.org/licenses/ \ud83d\udccb TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION \u00b6 1. Definitions \u00b6 \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License \u00b6 Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License \u00b6 Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution \u00b6 You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions \u00b6 Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks \u00b6 This License does not grant permission to use trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty \u00b6 Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability \u00b6 In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability \u00b6 While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. \ud83d\udcc4 END OF TERMS AND CONDITIONS \u00b6 \ud83d\udcce APPENDIX: How to apply the Apache License to your work \u00b6 To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#apache-license","text":"Version 2.0, January 2004 http://www.apache.org/licenses/","title":"\u2696\ufe0f Apache License"},{"location":"license/#terms-and-conditions-for-use-reproduction-and-distribution","text":"","title":"\ud83d\udccb TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION"},{"location":"license/#1-definitions","text":"\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.","title":"1. Definitions"},{"location":"license/#2-grant-of-copyright-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.","title":"2. Grant of Copyright License"},{"location":"license/#3-grant-of-patent-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.","title":"3. Grant of Patent License"},{"location":"license/#4-redistribution","text":"You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.","title":"4. Redistribution"},{"location":"license/#5-submission-of-contributions","text":"Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.","title":"5. Submission of Contributions"},{"location":"license/#6-trademarks","text":"This License does not grant permission to use trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.","title":"6. Trademarks"},{"location":"license/#7-disclaimer-of-warranty","text":"Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.","title":"7. Disclaimer of Warranty"},{"location":"license/#8-limitation-of-liability","text":"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.","title":"8. Limitation of Liability"},{"location":"license/#9-accepting-warranty-or-additional-liability","text":"While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.","title":"9. Accepting Warranty or Additional Liability"},{"location":"license/#end-of-terms-and-conditions","text":"","title":"\ud83d\udcc4 END OF TERMS AND CONDITIONS"},{"location":"license/#appendix-how-to-apply-the-apache-license-to-your-work","text":"To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"\ud83d\udcce APPENDIX: How to apply the Apache License to your work"},{"location":"usage/","text":"\ud83d\udcd8 Usage Guide \u00b6 \ud83d\udcbb Installation \u00b6 Install the package using pip: pip install python-ros-engine Or install in development mode: pip install -e . \ud83d\udd04 Node Lifecycle \u00b6 The Python ROS Engine follows a node lifecycle similar to ROS2: graph TD A[Node Creation] --> B[Configuration] B --> C[Activation] C --> D[Running] D --> E{Shutdown?} E -->|Yes| F[Cleanup] E -->|No| D F --> G[Node Destruction] \ud83d\udce2 Publisher/Subscriber Communication \u00b6 The publisher/subscriber pattern enables asynchronous one-to-many communication between nodes: graph LR A[Publishers] -- Messages --> B[(Topic)] B -- Messages --> C[Subscribers] B -- Messages --> D[Subscribers] Here's a sequence diagram showing the message flow between publishers and subscribers: sequenceDiagram participant Publisher participant Topic participant Subscriber1 participant Subscriber2 Publisher->>Topic: Publish Message Topic->>Subscriber1: Deliver Message Topic->>Subscriber2: Deliver Message \ud83d\ude80 Basic Usage \u00b6 \ud83c\udf00 Creating a Node \u00b6 from pyros2 import Node node = Node ( \"my_node\" ) # Add publishers, subscribers, services, etc. node . spin () \ud83d\udce4 Publisher \u00b6 from pyros2 import Node from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"publisher_node\" ) self . publisher = self . create_publisher ( String , \"/my_topic\" ) self . timer = self . create_timer ( 1.0 , self . publish_message ) def publish_message ( self ): msg = String () msg . data = \"Hello World!\" self . publisher . publish ( msg ) node = MyNode () node . spin () \ud83d\udce5 Subscriber \u00b6 from pyros2 import Node from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"subscriber_node\" ) self . subscription = self . create_subscription ( String , \"/my_topic\" , self . message_callback ) def message_callback ( self , msg ): print ( f \"Received: { msg . data } \" ) node = MyNode () node . spin () \ud83d\udee0\ufe0f Service \u00b6 from pyros2 import Node class AddTwoInts : class Request : def __init__ ( self , a = 0 , b = 0 ): self . a = a self . b = b class Response : def __init__ ( self , sum = 0 ): self . sum = sum class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"service_node\" ) self . service = self . create_service ( AddTwoInts , \"/add_two_ints\" , self . add_two_ints_callback ) def add_two_ints_callback ( self , request ): response = AddTwoInts . Response () response . sum = request . a + request . b return response node = MyNode () node . spin () \ud83d\udcde Client \u00b6 from pyros2 import Node import time class AddTwoInts : class Request : def __init__ ( self , a = 0 , b = 0 ): self . a = a self . b = b class Response : def __init__ ( self , sum = 0 ): self . sum = sum class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"client_node\" ) self . client = self . create_client ( AddTwoInts , \"/add_two_ints\" ) # Wait for service to be available while not self . client . service_is_ready (): print ( \"Waiting for service...\" ) time . sleep ( 1 ) def send_request ( self , a , b ): request = AddTwoInts . Request () request . a = a request . b = b response = self . client . call ( request ) return response node = MyNode () # Send requests as needed result = node . send_request ( 3 , 4 ) print ( f \"Result: { result . sum } \" ) Here's a sequence diagram showing the service/client request-response pattern: sequenceDiagram participant Client participant Service Client->>Service: Request (a=3, b=4) Service->>Client: Response (sum=7) Here's a sequence diagram showing the service/client request-response pattern: \u2699\ufe0f Advanced Usage \u00b6 \ud83d\udccb Quality of Service (QoS) Profiles \u00b6 The Python ROS Engine supports QoS profiles for publishers and subscribers: graph TD A[QoS Profiles] --> B[Reliability] A --> C[Durability] A --> D[Depth] B --> B1[Reliable - Guaranteed delivery] B --> B2[Best Effort - No delivery guarantees] C --> C1[Transient Local - Replays last message] C --> C2[Volatile - No message replay] D --> D1[Queue Depth - Message history size] from pyros2 import Node , QoSProfile from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"qos_example_node\" ) # Create a custom QoS profile qos_profile = QoSProfile () qos_profile . reliability = \"reliable\" # or \"best_effort\" qos_profile . durability = \"transient_local\" # or \"volatile\" qos_profile . depth = 10 # Use the QoS profile with publisher/subscriber self . publisher = self . create_publisher ( String , \"/my_topic\" , qos_profile ) self . subscription = self . create_subscription ( String , \"/my_topic\" , self . callback , qos_profile ) def callback ( self , msg ): print ( f \"Received: { msg . data } \" ) \u2699\ufe0f Parameter Handling \u00b6 Nodes can handle parameters with callbacks: graph TD A[Parameter Declaration] --> B[Parameter Storage] B --> C[Parameter Access] C --> D[Parameter Modification] D --> E[Callback Trigger] E --> F[Execute Callback Function] from pyros2 import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"parameter_node\" ) # Declare a parameter with a callback self . declare_parameter ( \"my_param\" , \"default_value\" , self . param_callback ) def param_callback ( self , param_name , old_value , new_value ): print ( f \"Parameter { param_name } changed from { old_value } to { new_value } \" ) \ud83d\udee0\ufe0f Configuration with Hydra \u00b6 Create a config.yaml file: node : name : my_node namespace : / publisher : topic : my_topic qos : reliability : reliable durability : volatile depth : 10 subscriber : topic : my_topic qos : reliability : reliable durability : volatile depth : 10 service : name : add_two_ints qos : reliability : reliable durability : volatile depth : 10 Then use it in your code: from pyros2 import Node from config.hydra_config import load_config config = load_config ( \"config.yaml\" ) node = Node ( config . node . name ) \ud83c\udfaf Complete Example Project \u00b6 We've included a complete example project in the repository that demonstrates how to build a robot system with multiple nodes. The example project includes: \u2699\ufe0f Configuration files using Hydra \ud83d\udce2 Publisher, \ud83d\udce5 subscriber, \ud83d\udee0\ufe0f service, and \ud83d\udcde client nodes \ud83d\ude80 A launch system to run all nodes together You can find the complete example in the example_project/ directory of the repository. \u25b6\ufe0f Running the Complete Example \u00b6 To run the complete example project: \ud83d\udcc2 Clone the repository: git clone https://github.com/yhbcode000/python-ros-engine.git cd python-ros-engine \ud83d\udcbb Install the package: pip install python-ros-engine \ud83d\udd04 Run individual nodes: python example_project/nodes/publisher_node.py python example_project/nodes/subscriber_node.py python example_project/nodes/service_node.py python example_project/nodes/client_node.py \ud83e\udd16 Run the complete robot system: python example_project/launch/robot_system.py \ud83e\uddea Running Examples \u00b6 To run the examples: python examples/publisher_example.py python examples/subscriber_example.py python examples/service_example.py python examples/client_example.py python examples/bridge_example.py Note: For the bridge example to work, you need to have a ROS master running on localhost:11311.","title":"Usage Guide"},{"location":"usage/#usage-guide","text":"","title":"\ud83d\udcd8 Usage Guide"},{"location":"usage/#installation","text":"Install the package using pip: pip install python-ros-engine Or install in development mode: pip install -e .","title":"\ud83d\udcbb Installation"},{"location":"usage/#node-lifecycle","text":"The Python ROS Engine follows a node lifecycle similar to ROS2: graph TD A[Node Creation] --> B[Configuration] B --> C[Activation] C --> D[Running] D --> E{Shutdown?} E -->|Yes| F[Cleanup] E -->|No| D F --> G[Node Destruction]","title":"\ud83d\udd04 Node Lifecycle"},{"location":"usage/#publishersubscriber-communication","text":"The publisher/subscriber pattern enables asynchronous one-to-many communication between nodes: graph LR A[Publishers] -- Messages --> B[(Topic)] B -- Messages --> C[Subscribers] B -- Messages --> D[Subscribers] Here's a sequence diagram showing the message flow between publishers and subscribers: sequenceDiagram participant Publisher participant Topic participant Subscriber1 participant Subscriber2 Publisher->>Topic: Publish Message Topic->>Subscriber1: Deliver Message Topic->>Subscriber2: Deliver Message","title":"\ud83d\udce2 Publisher/Subscriber Communication"},{"location":"usage/#basic-usage","text":"","title":"\ud83d\ude80 Basic Usage"},{"location":"usage/#creating-a-node","text":"from pyros2 import Node node = Node ( \"my_node\" ) # Add publishers, subscribers, services, etc. node . spin ()","title":"\ud83c\udf00 Creating a Node"},{"location":"usage/#publisher","text":"from pyros2 import Node from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"publisher_node\" ) self . publisher = self . create_publisher ( String , \"/my_topic\" ) self . timer = self . create_timer ( 1.0 , self . publish_message ) def publish_message ( self ): msg = String () msg . data = \"Hello World!\" self . publisher . publish ( msg ) node = MyNode () node . spin ()","title":"\ud83d\udce4 Publisher"},{"location":"usage/#subscriber","text":"from pyros2 import Node from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"subscriber_node\" ) self . subscription = self . create_subscription ( String , \"/my_topic\" , self . message_callback ) def message_callback ( self , msg ): print ( f \"Received: { msg . data } \" ) node = MyNode () node . spin ()","title":"\ud83d\udce5 Subscriber"},{"location":"usage/#service","text":"from pyros2 import Node class AddTwoInts : class Request : def __init__ ( self , a = 0 , b = 0 ): self . a = a self . b = b class Response : def __init__ ( self , sum = 0 ): self . sum = sum class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"service_node\" ) self . service = self . create_service ( AddTwoInts , \"/add_two_ints\" , self . add_two_ints_callback ) def add_two_ints_callback ( self , request ): response = AddTwoInts . Response () response . sum = request . a + request . b return response node = MyNode () node . spin ()","title":"\ud83d\udee0\ufe0f Service"},{"location":"usage/#client","text":"from pyros2 import Node import time class AddTwoInts : class Request : def __init__ ( self , a = 0 , b = 0 ): self . a = a self . b = b class Response : def __init__ ( self , sum = 0 ): self . sum = sum class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"client_node\" ) self . client = self . create_client ( AddTwoInts , \"/add_two_ints\" ) # Wait for service to be available while not self . client . service_is_ready (): print ( \"Waiting for service...\" ) time . sleep ( 1 ) def send_request ( self , a , b ): request = AddTwoInts . Request () request . a = a request . b = b response = self . client . call ( request ) return response node = MyNode () # Send requests as needed result = node . send_request ( 3 , 4 ) print ( f \"Result: { result . sum } \" ) Here's a sequence diagram showing the service/client request-response pattern: sequenceDiagram participant Client participant Service Client->>Service: Request (a=3, b=4) Service->>Client: Response (sum=7) Here's a sequence diagram showing the service/client request-response pattern:","title":"\ud83d\udcde Client"},{"location":"usage/#advanced-usage","text":"","title":"\u2699\ufe0f Advanced Usage"},{"location":"usage/#quality-of-service-qos-profiles","text":"The Python ROS Engine supports QoS profiles for publishers and subscribers: graph TD A[QoS Profiles] --> B[Reliability] A --> C[Durability] A --> D[Depth] B --> B1[Reliable - Guaranteed delivery] B --> B2[Best Effort - No delivery guarantees] C --> C1[Transient Local - Replays last message] C --> C2[Volatile - No message replay] D --> D1[Queue Depth - Message history size] from pyros2 import Node , QoSProfile from pyros2.message import String class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"qos_example_node\" ) # Create a custom QoS profile qos_profile = QoSProfile () qos_profile . reliability = \"reliable\" # or \"best_effort\" qos_profile . durability = \"transient_local\" # or \"volatile\" qos_profile . depth = 10 # Use the QoS profile with publisher/subscriber self . publisher = self . create_publisher ( String , \"/my_topic\" , qos_profile ) self . subscription = self . create_subscription ( String , \"/my_topic\" , self . callback , qos_profile ) def callback ( self , msg ): print ( f \"Received: { msg . data } \" )","title":"\ud83d\udccb Quality of Service (QoS) Profiles"},{"location":"usage/#parameter-handling","text":"Nodes can handle parameters with callbacks: graph TD A[Parameter Declaration] --> B[Parameter Storage] B --> C[Parameter Access] C --> D[Parameter Modification] D --> E[Callback Trigger] E --> F[Execute Callback Function] from pyros2 import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( \"parameter_node\" ) # Declare a parameter with a callback self . declare_parameter ( \"my_param\" , \"default_value\" , self . param_callback ) def param_callback ( self , param_name , old_value , new_value ): print ( f \"Parameter { param_name } changed from { old_value } to { new_value } \" )","title":"\u2699\ufe0f Parameter Handling"},{"location":"usage/#configuration-with-hydra","text":"Create a config.yaml file: node : name : my_node namespace : / publisher : topic : my_topic qos : reliability : reliable durability : volatile depth : 10 subscriber : topic : my_topic qos : reliability : reliable durability : volatile depth : 10 service : name : add_two_ints qos : reliability : reliable durability : volatile depth : 10 Then use it in your code: from pyros2 import Node from config.hydra_config import load_config config = load_config ( \"config.yaml\" ) node = Node ( config . node . name )","title":"\ud83d\udee0\ufe0f Configuration with Hydra"},{"location":"usage/#complete-example-project","text":"We've included a complete example project in the repository that demonstrates how to build a robot system with multiple nodes. The example project includes: \u2699\ufe0f Configuration files using Hydra \ud83d\udce2 Publisher, \ud83d\udce5 subscriber, \ud83d\udee0\ufe0f service, and \ud83d\udcde client nodes \ud83d\ude80 A launch system to run all nodes together You can find the complete example in the example_project/ directory of the repository.","title":"\ud83c\udfaf Complete Example Project"},{"location":"usage/#running-the-complete-example","text":"To run the complete example project: \ud83d\udcc2 Clone the repository: git clone https://github.com/yhbcode000/python-ros-engine.git cd python-ros-engine \ud83d\udcbb Install the package: pip install python-ros-engine \ud83d\udd04 Run individual nodes: python example_project/nodes/publisher_node.py python example_project/nodes/subscriber_node.py python example_project/nodes/service_node.py python example_project/nodes/client_node.py \ud83e\udd16 Run the complete robot system: python example_project/launch/robot_system.py","title":"\u25b6\ufe0f Running the Complete Example"},{"location":"usage/#running-examples","text":"To run the examples: python examples/publisher_example.py python examples/subscriber_example.py python examples/service_example.py python examples/client_example.py python examples/bridge_example.py Note: For the bridge example to work, you need to have a ROS master running on localhost:11311.","title":"\ud83e\uddea Running Examples"}]}